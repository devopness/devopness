name: Release - Packages

on:
  workflow_dispatch:
  push:
    paths:
      - packages/**/src/**
      - packages/**/package.json
    branches:
      - main
      - '*.x' # maintenance releases

permissions:
  contents: write
  pull-requests: write

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release-npm-packages:
    name: Release NPM Packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install SDK dependencies
        run: npm ci --ignore-scripts

      - name: Create Release Pull Request or Publish Packages
        uses: changesets/action@v1
        with:
          title: 'chore: version packages'
          publish: npx changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  release-pypi-packages:
    name: Release PyPI Packages
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(vars.DEVOPNESS_PYPI_PACKAGES) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        working-directory: ${{ matrix.path }}
        run: make build-image

      - name: Check if version already published on PyPI
        id: version_check
        working-directory: ${{ matrix.path }}
        run: |
          LOCAL_VERSION=$(jq -r .version package.json)
          PYPI_VERSION=$(curl -s https://pypi.org/pypi/${{ matrix.pypi_name }}/json | jq -r .info.version)

          echo "Local version: $LOCAL_VERSION"
          echo "PyPI version:  $PYPI_VERSION"

          if [ "$LOCAL_VERSION" = "$PYPI_VERSION" ]; then
            echo "Package version is already published on PyPI. Skipping publish."
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected. Proceeding with publish."
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish '${{ matrix.name }}' to PyPI
        if: steps.version_check.outputs.should_publish == 'true'
        working-directory: ${{ matrix.path }}
        run: make publish
        env:
          PYPI_TOKEN: ${{ secrets[matrix.pypi_token] }}
