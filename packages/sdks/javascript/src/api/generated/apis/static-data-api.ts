/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApplicationOptions } from '../../generated/models';
import { BillingPlansOptionsRelation } from '../../generated/models';
import { CloudInstanceRelation } from '../../generated/models';
import { CloudProviderService } from '../../generated/models';
import { CredentialOptions } from '../../generated/models';
import { CronJobOptions } from '../../generated/models';
import { EnvironmentOptions } from '../../generated/models';
import { NetworkRuleOptions } from '../../generated/models';
import { PermissionRelation } from '../../generated/models';
import { ResourceTypeRelation } from '../../generated/models';
import { ServerOptions } from '../../generated/models';
import { ServiceOptions } from '../../generated/models';
import { UserProfileOptions } from '../../generated/models';
import { VirtualHostOptions } from '../../generated/models';

/**
 * StaticDataApiService - Auto-generated
 */
export class StaticDataApiService extends ApiBaseService {
    /**
     * 
     * @summary List `Application` resource options
     */
    public async getStaticApplicationOptions(): Promise<ApiResponse<ApplicationOptions>> {

        let queryString = '';

        const requestUrl = '/static/application-options' + (queryString? `?${queryString}` : '');

        const response = await this.get <ApplicationOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get details of a single `Cloud Provider Service`
     * @param {string} cloudProviderServiceCode The cloud provider service code.
     */
    public async getStaticCloudProviderService(cloudProviderServiceCode: string): Promise<ApiResponse<CloudProviderService>> {
        if (cloudProviderServiceCode === null || cloudProviderServiceCode === undefined) {
            throw new ArgumentNullException('cloudProviderServiceCode', 'getStaticCloudProviderService');
        }

        let queryString = '';

        const requestUrl = '/static/cloud-provider-service-options/{cloud_provider_service_code}' + (queryString? `?${queryString}` : '');

        const response = await this.get <CloudProviderService>(requestUrl.replace(`{${"cloud_provider_service_code"}}`, encodeURIComponent(String(cloudProviderServiceCode))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List `Credential` resource options
     */
    public async getStaticCredentialOptions(): Promise<ApiResponse<CredentialOptions>> {

        let queryString = '';

        const requestUrl = '/static/credential-options' + (queryString? `?${queryString}` : '');

        const response = await this.get <CredentialOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List `CronJob` resource options
     */
    public async getStaticCronJobOptions(): Promise<ApiResponse<CronJobOptions>> {

        let queryString = '';

        const requestUrl = '/static/cronjob-options' + (queryString? `?${queryString}` : '');

        const response = await this.get <CronJobOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List `Environment` options
     */
    public async getStaticEnvironmentOptions(): Promise<ApiResponse<EnvironmentOptions>> {

        let queryString = '';

        const requestUrl = '/static/environment-options' + (queryString? `?${queryString}` : '');

        const response = await this.get <EnvironmentOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List `Network Rule` options
     */
    public async getStaticNetworkRuleOptions(): Promise<ApiResponse<NetworkRuleOptions>> {

        let queryString = '';

        const requestUrl = '/static/network-rule-options' + (queryString? `?${queryString}` : '');

        const response = await this.get <NetworkRuleOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List `Server` options
     */
    public async getStaticServerOptions(): Promise<ApiResponse<ServerOptions>> {

        let queryString = '';

        const requestUrl = '/static/server-options' + (queryString? `?${queryString}` : '');

        const response = await this.get <ServerOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List `Service` resource options
     */
    public async getStaticServiceOptions(): Promise<ApiResponse<ServiceOptions>> {

        let queryString = '';

        const requestUrl = '/static/service-options' + (queryString? `?${queryString}` : '');

        const response = await this.get <ServiceOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List `User profile` options
     */
    public async getStaticUserProfileOptions(): Promise<ApiResponse<UserProfileOptions>> {

        let queryString = '';

        const requestUrl = '/static/user-profile-options' + (queryString? `?${queryString}` : '');

        const response = await this.get <UserProfileOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List `Virtual Host` options
     */
    public async getStaticVirtualHostOptions(): Promise<ApiResponse<VirtualHostOptions>> {

        let queryString = '';

        const requestUrl = '/static/virtual-host-options' + (queryString? `?${queryString}` : '');

        const response = await this.get <VirtualHostOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List `Billing Plans` options
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listStaticBillingPlansOptions(page?: number, perPage?: number): Promise<ApiResponse<Array<BillingPlansOptionsRelation>>> {

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/static/billing-plans-options' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<BillingPlansOptionsRelation>>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List `Cloud Provider Service` instance types by region
     * @param {string} cloudProviderServiceCode The cloud provider service code.
     * @param {string} regionCode The region of the cloud provider to get related instances.
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listStaticCloudInstancesByCloudProviderServiceCodeAndRegionCode(cloudProviderServiceCode: string, regionCode: string, page?: number, perPage?: number): Promise<ApiResponse<Array<CloudInstanceRelation>>> {
        if (cloudProviderServiceCode === null || cloudProviderServiceCode === undefined) {
            throw new ArgumentNullException('cloudProviderServiceCode', 'listStaticCloudInstancesByCloudProviderServiceCodeAndRegionCode');
        }
        if (regionCode === null || regionCode === undefined) {
            throw new ArgumentNullException('regionCode', 'listStaticCloudInstancesByCloudProviderServiceCodeAndRegionCode');
        }

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/static/cloud-provider-service-options/{cloud_provider_service_code}/regions/{region_code}/instances' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<CloudInstanceRelation>>(requestUrl.replace(`{${"cloud_provider_service_code"}}`, encodeURIComponent(String(cloudProviderServiceCode))).replace(`{${"region_code"}}`, encodeURIComponent(String(regionCode))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List available `Role` permissions
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listStaticPermissions(page?: number, perPage?: number): Promise<ApiResponse<Array<PermissionRelation>>> {

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/static/permissions' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<PermissionRelation>>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List available resource types
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listStaticResourceTypes(page?: number, perPage?: number): Promise<ApiResponse<Array<ResourceTypeRelation>>> {

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/static/resource-types' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<ResourceTypeRelation>>(requestUrl);
        return new ApiResponse(response);
    }
}
