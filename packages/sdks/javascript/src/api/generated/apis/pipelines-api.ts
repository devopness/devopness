/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Pipeline } from '../../generated/models';
import { PipelineCreate } from '../../generated/models';
import { PipelineRelation } from '../../generated/models';
import { PipelineUpdate } from '../../generated/models';

/**
 * PipelinesApiService - Auto-generated
 */
export class PipelinesApiService extends ApiBaseService {
    /**
     * 
     * @summary Add a Pipeline to a resource
     * @param {number} resourceId The resource ID.
     * @param {string} resourceType The resource type to add a pipeline to.
     * @param {PipelineCreate} pipelineCreate A JSON object containing the resource data
     */
    public async addPipeline(resourceId: number, resourceType: string, pipelineCreate: PipelineCreate): Promise<ApiResponse<Pipeline>> {
        if (resourceId === null || resourceId === undefined) {
            throw new ArgumentNullException('resourceId', 'addPipeline');
        }
        if (resourceType === null || resourceType === undefined) {
            throw new ArgumentNullException('resourceType', 'addPipeline');
        }
        if (pipelineCreate === null || pipelineCreate === undefined) {
            throw new ArgumentNullException('pipelineCreate', 'addPipeline');
        }

        let queryString = '';

        const requestUrl = '/pipelines/{resource_type}/{resource_id}' + (queryString? `?${queryString}` : '');

        const response = await this.post <Pipeline, PipelineCreate>(requestUrl.replace(`{${"resource_id"}}`, encodeURIComponent(String(resourceId))).replace(`{${"resource_type"}}`, encodeURIComponent(String(resourceType))), pipelineCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Delete a given Pipeline
     * @param {number} pipelineId The ID of the pipeline.
     */
    public async deletePipeline(pipelineId: number): Promise<ApiResponse<void>> {
        if (pipelineId === null || pipelineId === undefined) {
            throw new ArgumentNullException('pipelineId', 'deletePipeline');
        }

        let queryString = '';

        const requestUrl = '/pipelines/{pipeline_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"pipeline_id"}}`, encodeURIComponent(String(pipelineId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a Pipeline by ID
     * @param {number} pipelineId The ID of the pipeline.
     */
    public async getPipeline(pipelineId: number): Promise<ApiResponse<Pipeline>> {
        if (pipelineId === null || pipelineId === undefined) {
            throw new ArgumentNullException('pipelineId', 'getPipeline');
        }

        let queryString = '';

        const requestUrl = '/pipelines/{pipeline_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Pipeline>(requestUrl.replace(`{${"pipeline_id"}}`, encodeURIComponent(String(pipelineId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Return a list of pipelines to a resource
     * @param {number} resourceId The resource ID.
     * @param {string} resourceType The resource type to get pipelines from.
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listPipelinesByResourceType(resourceId: number, resourceType: string, page?: number, perPage?: number): Promise<ApiResponse<Array<PipelineRelation>>> {
        if (resourceId === null || resourceId === undefined) {
            throw new ArgumentNullException('resourceId', 'listPipelinesByResourceType');
        }
        if (resourceType === null || resourceType === undefined) {
            throw new ArgumentNullException('resourceType', 'listPipelinesByResourceType');
        }

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/pipelines/{resource_type}/{resource_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<PipelineRelation>>(requestUrl.replace(`{${"resource_id"}}`, encodeURIComponent(String(resourceId))).replace(`{${"resource_type"}}`, encodeURIComponent(String(resourceType))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Update an existing Pipeline
     * @param {number} pipelineId The ID of the pipeline.
     * @param {PipelineUpdate} pipelineUpdate A JSON object containing the resource data
     */
    public async updatePipeline(pipelineId: number, pipelineUpdate: PipelineUpdate): Promise<ApiResponse<void>> {
        if (pipelineId === null || pipelineId === undefined) {
            throw new ArgumentNullException('pipelineId', 'updatePipeline');
        }
        if (pipelineUpdate === null || pipelineUpdate === undefined) {
            throw new ArgumentNullException('pipelineUpdate', 'updatePipeline');
        }

        let queryString = '';

        const requestUrl = '/pipelines/{pipeline_id}' + (queryString? `?${queryString}` : '');

        const response = await this.put <void, PipelineUpdate>(requestUrl.replace(`{${"pipeline_id"}}`, encodeURIComponent(String(pipelineId))), pipelineUpdate);
        return new ApiResponse(response);
    }
}
