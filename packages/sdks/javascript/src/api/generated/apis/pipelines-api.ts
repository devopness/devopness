/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Pipeline } from '../../generated/models';

/**
 * PipelinesApiService - Auto-generated
 */
export class PipelinesApiService extends ApiBaseService {
    /**
     * 
     * @summary Delete a pipeline by ID
     * @param {number} pipelineId Unique ID of the pipeline to be deleted
     */
    public async deletePipeline(pipelineId: number): Promise<ApiResponse<void>> {
        if (pipelineId === null || pipelineId === undefined) {
            throw new ArgumentNullException('pipelineId', 'deletePipeline');
        }
        
        let queryString = '';

        const requestUrl = '/pipelines/{pipeline_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"pipeline_id"}}`, encodeURIComponent(String(pipelineId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a pipeline by ID
     * @param {number} pipelineId Unique ID of the pipeline to get information from
     */
    public async getPipeline(pipelineId: number): Promise<ApiResponse<Pipeline>> {
        if (pipelineId === null || pipelineId === undefined) {
            throw new ArgumentNullException('pipelineId', 'getPipeline');
        }
        
        let queryString = '';

        const requestUrl = '/pipelines/{pipeline_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Pipeline>(requestUrl.replace(`{${"pipeline_id"}}`, encodeURIComponent(String(pipelineId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Update a pipeline by ID
     * @param {number} pipelineId Unique ID of the pipeline to update information from
     * @param {Pipeline} pipeline A JSON object containing pipeline data
     */
    public async updatePipeline(pipelineId: number, pipeline: Pipeline): Promise<ApiResponse<void>> {
        if (pipelineId === null || pipelineId === undefined) {
            throw new ArgumentNullException('pipelineId', 'updatePipeline');
        }
        if (pipeline === null || pipeline === undefined) {
            throw new ArgumentNullException('pipeline', 'updatePipeline');
        }
        
        let queryString = '';

        const requestUrl = '/pipelines/{pipeline_id}' + (queryString? `?${queryString}` : '');

        const response = await this.put <void, Pipeline>(requestUrl.replace(`{${"pipeline_id"}}`, encodeURIComponent(String(pipelineId))), pipeline);
        return new ApiResponse(response);
    }
}
