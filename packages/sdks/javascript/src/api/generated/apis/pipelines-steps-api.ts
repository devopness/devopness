/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { PipelineStep } from '../../generated/models';
import { PipelineStepCreate } from '../../generated/models';
import { PipelineStepUpdate } from '../../generated/models';

/**
 * PipelinesStepsApiService - Auto-generated
 */
export class PipelinesStepsApiService extends ApiBaseService {
    /**
     * 
     * @summary Add a step to a pipeline
     * @param {number} pipelineId The ID of the pipeline.
     * @param {PipelineStepCreate} pipelineStepCreate A JSON object containing the resource data
     */
    public async addPipelinePipelineStep(pipelineId: number, pipelineStepCreate: PipelineStepCreate): Promise<ApiResponse<PipelineStep>> {
        if (pipelineId === null || pipelineId === undefined) {
            throw new ArgumentNullException('pipelineId', 'addPipelinePipelineStep');
        }
        if (pipelineStepCreate === null || pipelineStepCreate === undefined) {
            throw new ArgumentNullException('pipelineStepCreate', 'addPipelinePipelineStep');
        }
        
        let queryString = '';

        const requestUrl = '/pipelines/{pipeline_id}/steps' + (queryString? `?${queryString}` : '');

        const response = await this.post <PipelineStep, PipelineStepCreate>(requestUrl.replace(`{${"pipeline_id"}}`, encodeURIComponent(String(pipelineId))), pipelineStepCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Link a step to a Pipeline
     * @param {number} pipelineId The ID of the pipeline.
     * @param {number} stepId The ID of the step.
     */
    public async linkPipelineStepToPipeline(pipelineId: number, stepId: number): Promise<ApiResponse<void>> {
        if (pipelineId === null || pipelineId === undefined) {
            throw new ArgumentNullException('pipelineId', 'linkPipelineStepToPipeline');
        }
        if (stepId === null || stepId === undefined) {
            throw new ArgumentNullException('stepId', 'linkPipelineStepToPipeline');
        }
        
        let queryString = '';

        const requestUrl = '/pipelines/{pipeline_id}/steps/{step_id}/link' + (queryString? `?${queryString}` : '');

        const response = await this.post <void>(requestUrl.replace(`{${"pipeline_id"}}`, encodeURIComponent(String(pipelineId))).replace(`{${"step_id"}}`, encodeURIComponent(String(stepId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Unlink a step from a Pipeline
     * @param {number} pipelineId The ID of the pipeline.
     * @param {number} stepId The ID of the step.
     */
    public async unlinkPipelineStepFromPipeline(pipelineId: number, stepId: number): Promise<ApiResponse<void>> {
        if (pipelineId === null || pipelineId === undefined) {
            throw new ArgumentNullException('pipelineId', 'unlinkPipelineStepFromPipeline');
        }
        if (stepId === null || stepId === undefined) {
            throw new ArgumentNullException('stepId', 'unlinkPipelineStepFromPipeline');
        }
        
        let queryString = '';

        const requestUrl = '/pipelines/{pipeline_id}/steps/{step_id}/unlink' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"pipeline_id"}}`, encodeURIComponent(String(pipelineId))).replace(`{${"step_id"}}`, encodeURIComponent(String(stepId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Update an existing Pipeline Step
     * @param {number} pipelineId The ID of the pipeline.
     * @param {string} stepId The ID of the step.
     * @param {PipelineStepUpdate} pipelineStepUpdate A JSON object containing the resource data
     */
    public async updatePipelinePipelineStep(pipelineId: number, stepId: string, pipelineStepUpdate: PipelineStepUpdate): Promise<ApiResponse<void>> {
        if (pipelineId === null || pipelineId === undefined) {
            throw new ArgumentNullException('pipelineId', 'updatePipelinePipelineStep');
        }
        if (stepId === null || stepId === undefined) {
            throw new ArgumentNullException('stepId', 'updatePipelinePipelineStep');
        }
        if (pipelineStepUpdate === null || pipelineStepUpdate === undefined) {
            throw new ArgumentNullException('pipelineStepUpdate', 'updatePipelinePipelineStep');
        }
        
        let queryString = '';

        const requestUrl = '/pipelines/{pipeline_id}/steps/{step_id}' + (queryString? `?${queryString}` : '');

        const response = await this.put <void, PipelineStepUpdate>(requestUrl.replace(`{${"pipeline_id"}}`, encodeURIComponent(String(pipelineId))).replace(`{${"step_id"}}`, encodeURIComponent(String(stepId))), pipelineStepUpdate);
        return new ApiResponse(response);
    }
}
