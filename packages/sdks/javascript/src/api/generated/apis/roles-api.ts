/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Role } from '../../generated/models';
import { RoleUpdate } from '../../generated/models';

/**
 * RolesApiService - Auto-generated
 */
export class RolesApiService extends ApiBaseService {
    /**
     * 
     * @summary Delete a given role
     * @param {number} roleId The ID of the role.
     */
    public async deleteRole(roleId: number): Promise<ApiResponse<void>> {
        if (roleId === null || roleId === undefined) {
            throw new ArgumentNullException('roleId', 'deleteRole');
        }

        let queryString = '';

        const requestUrl = '/roles/{role_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"role_id"}}`, encodeURIComponent(String(roleId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a role by ID
     * @param {number} roleId The ID of the role.
     */
    public async getRole(roleId: number): Promise<ApiResponse<Role>> {
        if (roleId === null || roleId === undefined) {
            throw new ArgumentNullException('roleId', 'getRole');
        }

        let queryString = '';

        const requestUrl = '/roles/{role_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Role>(requestUrl.replace(`{${"role_id"}}`, encodeURIComponent(String(roleId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Update an existing role
     * @param {number} roleId The ID of the role.
     * @param {RoleUpdate} roleUpdate A JSON object containing the resource data
     */
    public async updateRole(roleId: number, roleUpdate: RoleUpdate): Promise<ApiResponse<void>> {
        if (roleId === null || roleId === undefined) {
            throw new ArgumentNullException('roleId', 'updateRole');
        }
        if (roleUpdate === null || roleUpdate === undefined) {
            throw new ArgumentNullException('roleUpdate', 'updateRole');
        }

        let queryString = '';

        const requestUrl = '/roles/{role_id}' + (queryString? `?${queryString}` : '');

        const response = await this.put <void, RoleUpdate>(requestUrl.replace(`{${"role_id"}}`, encodeURIComponent(String(roleId))), roleUpdate);
        return new ApiResponse(response);
    }
}
