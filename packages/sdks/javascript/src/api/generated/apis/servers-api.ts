/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Server } from '../../generated/models';
import { ServerCommand } from '../../generated/models';
import { ServerEnvironmentCreate } from '../../generated/models';
import { ServerRelation } from '../../generated/models';
import { ServerUpdate } from '../../generated/models';

/**
 * ServersApiService - Auto-generated
 */
export class ServersApiService extends ApiBaseService {
    /**
     * 
     * @summary Creates a server and link it to the given environment
     * @param {number} environmentId The ID of the environment.
     * @param {ServerEnvironmentCreate} serverEnvironmentCreate A JSON object containing the resource data
     */
    public async addEnvironmentServer(environmentId: number, serverEnvironmentCreate: ServerEnvironmentCreate): Promise<ApiResponse<Server>> {
        if (environmentId === null || environmentId === undefined) {
            throw new ArgumentNullException('environmentId', 'addEnvironmentServer');
        }
        if (serverEnvironmentCreate === null || serverEnvironmentCreate === undefined) {
            throw new ArgumentNullException('serverEnvironmentCreate', 'addEnvironmentServer');
        }

        let queryString = '';

        const requestUrl = '/environments/{environment_id}/servers' + (queryString? `?${queryString}` : '');

        const response = await this.post <Server, ServerEnvironmentCreate>(requestUrl.replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId))), serverEnvironmentCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Connect a server to devopness platform
     * @param {string} activationToken The server activation token.
     * @param {number} serverId The ID of the server.
     */
    public async connectServer(activationToken: string, serverId: number): Promise<ApiResponse<string>> {
        if (activationToken === null || activationToken === undefined) {
            throw new ArgumentNullException('activationToken', 'connectServer');
        }
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'connectServer');
        }

        let queryString = '';

        const requestUrl = '/servers/{server_id}/connect/{activation_token}' + (queryString? `?${queryString}` : '');

        const response = await this.post <string>(requestUrl.replace(`{${"activation_token"}}`, encodeURIComponent(String(activationToken))).replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Delete a given server
     * @param {number} serverId The ID of the server.
     * @param {boolean} [destroyServerDisks] Indicates whether disks associated with a cloud server should be deleted after the server is destroyed
     */
    public async deleteServer(serverId: number, destroyServerDisks?: boolean): Promise<ApiResponse<void>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'deleteServer');
        }

        let queryString = '';
        const queryParams = { destroy_server_disks: destroyServerDisks, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/servers/{server_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a server by ID
     * @param {number} serverId The ID of the server.
     */
    public async getServer(serverId: number): Promise<ApiResponse<Server>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'getServer');
        }

        let queryString = '';

        const requestUrl = '/servers/{server_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Server>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get commands to be executed on the given server
     * @param {number} serverId The ID of the server.
     */
    public async getServerCommands(serverId: number): Promise<ApiResponse<ServerCommand>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'getServerCommands');
        }

        let queryString = '';

        const requestUrl = '/servers/{server_id}/commands' + (queryString? `?${queryString}` : '');

        const response = await this.get <ServerCommand>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get current status of the server on the cloud provider
     * @param {number} serverId The ID of the server.
     */
    public async getStatusServer(serverId: number): Promise<ApiResponse<void>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'getStatusServer');
        }

        let queryString = '';

        const requestUrl = '/servers/{server_id}/get-status' + (queryString? `?${queryString}` : '');

        const response = await this.post <void>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Return a list of all servers belonging to an environment
     * @param {number} environmentId The ID of the environment.
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listEnvironmentServers(environmentId: number, page?: number, perPage?: number): Promise<ApiResponse<Array<ServerRelation>>> {
        if (environmentId === null || environmentId === undefined) {
            throw new ArgumentNullException('environmentId', 'listEnvironmentServers');
        }

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/environments/{environment_id}/servers' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<ServerRelation>>(requestUrl.replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Restart a current running server
     * @param {number} serverId The ID of the server.
     */
    public async restartServer(serverId: number): Promise<ApiResponse<void>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'restartServer');
        }

        let queryString = '';

        const requestUrl = '/servers/{server_id}/restart' + (queryString? `?${queryString}` : '');

        const response = await this.post <void>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Rotate the key used to access the server
     * @param {number} serverId The ID of the server.
     */
    public async rotateKeyServer(serverId: number): Promise<ApiResponse<void>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'rotateKeyServer');
        }

        let queryString = '';

        const requestUrl = '/servers/{server_id}/rotate-key' + (queryString? `?${queryString}` : '');

        const response = await this.post <void>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Start a previously stopped server
     * @param {number} serverId The ID of the server.
     */
    public async startServer(serverId: number): Promise<ApiResponse<void>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'startServer');
        }

        let queryString = '';

        const requestUrl = '/servers/{server_id}/start' + (queryString? `?${queryString}` : '');

        const response = await this.post <void>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Stop a running server
     * @param {number} serverId The ID of the server.
     */
    public async stopServer(serverId: number): Promise<ApiResponse<void>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'stopServer');
        }

        let queryString = '';

        const requestUrl = '/servers/{server_id}/stop' + (queryString? `?${queryString}` : '');

        const response = await this.post <void>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Update an existing server
     * @param {number} serverId The ID of the server.
     * @param {ServerUpdate} serverUpdate A JSON object containing the resource data
     */
    public async updateServer(serverId: number, serverUpdate: ServerUpdate): Promise<ApiResponse<void>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'updateServer');
        }
        if (serverUpdate === null || serverUpdate === undefined) {
            throw new ArgumentNullException('serverUpdate', 'updateServer');
        }

        let queryString = '';

        const requestUrl = '/servers/{server_id}' + (queryString? `?${queryString}` : '');

        const response = await this.put <void, ServerUpdate>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))), serverUpdate);
        return new ApiResponse(response);
    }
}
