/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Credential } from '../../generated/models';
import { CredentialCloudProviderCreate } from '../../generated/models';
import { CredentialRelation } from '../../generated/models';

/**
 * CloudProvidersCredentialsApiService - Auto-generated
 */
export class CloudProvidersCredentialsApiService extends ApiBaseService {
    /**
     * 
     * @summary Add a cloud provider credential
     * @param {string} cloudProviderCode The cloud provider code.
     * @param {CredentialCloudProviderCreate} credentialCloudProviderCreate A JSON object containing the resource data
     */
    public async addCloudProviderCredential(cloudProviderCode: string, credentialCloudProviderCreate: CredentialCloudProviderCreate): Promise<ApiResponse<Credential>> {
        if (cloudProviderCode === null || cloudProviderCode === undefined) {
            throw new ArgumentNullException('cloudProviderCode', 'addCloudProviderCredential');
        }
        if (credentialCloudProviderCreate === null || credentialCloudProviderCreate === undefined) {
            throw new ArgumentNullException('credentialCloudProviderCreate', 'addCloudProviderCredential');
        }

        let queryString = '';

        const requestUrl = '/cloud-providers/{cloud_provider_code}/credentials' + (queryString? `?${queryString}` : '');

        const response = await this.post <Credential, CredentialCloudProviderCreate>(requestUrl.replace(`{${"cloud_provider_code"}}`, encodeURIComponent(String(cloudProviderCode))), credentialCloudProviderCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List credentials of the given cloud provider
     * @param {string} cloudProviderCode The cloud provider code.
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listCloudProviderCredentialsByCloudProviderCode(cloudProviderCode: string, page?: number, perPage?: number): Promise<ApiResponse<Array<CredentialRelation>>> {
        if (cloudProviderCode === null || cloudProviderCode === undefined) {
            throw new ArgumentNullException('cloudProviderCode', 'listCloudProviderCredentialsByCloudProviderCode');
        }

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/cloud-providers/{cloud_provider_code}/credentials' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<CredentialRelation>>(requestUrl.replace(`{${"cloud_provider_code"}}`, encodeURIComponent(String(cloudProviderCode))));
        return new ApiResponse(response);
    }
}
