/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { PersonalAccessToken } from '../../generated/models';
import { PersonalAccessTokenRelation } from '../../generated/models';
import { PersonalAccessTokenRotateResponse } from '../../generated/models';
import { PersonalAccessTokenUserCreate } from '../../generated/models';
import { PersonalAccessTokenUserRotate } from '../../generated/models';

/**
 * UsersPersonalAccessTokensApiService - Auto-generated
 */
export class UsersPersonalAccessTokensApiService extends ApiBaseService {
    /**
     * 
     * @summary Create a new personal access token for the authenticated user.
     * @param {PersonalAccessTokenUserCreate} personalAccessTokenUserCreate A JSON object containing the resource data
     */
    public async addUserPersonalAccessToken(personalAccessTokenUserCreate: PersonalAccessTokenUserCreate): Promise<ApiResponse<PersonalAccessToken>> {
        if (personalAccessTokenUserCreate === null || personalAccessTokenUserCreate === undefined) {
            throw new ArgumentNullException('personalAccessTokenUserCreate', 'addUserPersonalAccessToken');
        }

        let queryString = '';

        const requestUrl = '/users/personal-access-tokens' + (queryString? `?${queryString}` : '');

        const response = await this.post <PersonalAccessToken, PersonalAccessTokenUserCreate>(requestUrl, personalAccessTokenUserCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get details of a specific personal access token.
     * @param {string} personalAccessTokenId The ID of the personal access token.
     */
    public async getUserPersonalAccessToken(personalAccessTokenId: string): Promise<ApiResponse<PersonalAccessToken>> {
        if (personalAccessTokenId === null || personalAccessTokenId === undefined) {
            throw new ArgumentNullException('personalAccessTokenId', 'getUserPersonalAccessToken');
        }

        let queryString = '';

        const requestUrl = '/users/personal-access-tokens/{personal_access_token_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <PersonalAccessToken>(requestUrl.replace(`{${"personal_access_token_id"}}`, encodeURIComponent(String(personalAccessTokenId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List the personal access tokens of authenticated user.
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listUserPersonalAccessTokens(page?: number, perPage?: number): Promise<ApiResponse<Array<PersonalAccessTokenRelation>>> {

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/users/personal-access-tokens' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<PersonalAccessTokenRelation>>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Revoke a specific personal access token.
     * @param {string} personalAccessTokenId The ID of the personal access token.
     */
    public async revokeUserPersonalAccessToken(personalAccessTokenId: string): Promise<ApiResponse<void>> {
        if (personalAccessTokenId === null || personalAccessTokenId === undefined) {
            throw new ArgumentNullException('personalAccessTokenId', 'revokeUserPersonalAccessToken');
        }

        let queryString = '';

        const requestUrl = '/users/personal-access-tokens/{personal_access_token_id}/revoke' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"personal_access_token_id"}}`, encodeURIComponent(String(personalAccessTokenId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Rotate a specific personal access token.
     * @param {string} personalAccessTokenId The ID of the personal access token.
     * @param {PersonalAccessTokenUserRotate} personalAccessTokenUserRotate A JSON object containing the resource data
     */
    public async rotateUserPersonalAccessToken(personalAccessTokenId: string, personalAccessTokenUserRotate: PersonalAccessTokenUserRotate): Promise<ApiResponse<PersonalAccessTokenRotateResponse>> {
        if (personalAccessTokenId === null || personalAccessTokenId === undefined) {
            throw new ArgumentNullException('personalAccessTokenId', 'rotateUserPersonalAccessToken');
        }
        if (personalAccessTokenUserRotate === null || personalAccessTokenUserRotate === undefined) {
            throw new ArgumentNullException('personalAccessTokenUserRotate', 'rotateUserPersonalAccessToken');
        }

        let queryString = '';

        const requestUrl = '/users/personal-access-tokens/{personal_access_token_id}/rotate' + (queryString? `?${queryString}` : '');

        const response = await this.post <PersonalAccessTokenRotateResponse, PersonalAccessTokenUserRotate>(requestUrl.replace(`{${"personal_access_token_id"}}`, encodeURIComponent(String(personalAccessTokenId))), personalAccessTokenUserRotate);
        return new ApiResponse(response);
    }
}
