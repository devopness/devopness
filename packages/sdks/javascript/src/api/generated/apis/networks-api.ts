/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Network } from '../../generated/models';
import { NetworkUpdate } from '../../generated/models';

/**
 * NetworksApiService - Auto-generated
 */
export class NetworksApiService extends ApiBaseService {
    /**
     * 
     * @summary Delete a given network
     * @param {number} networkId The ID of the network.
     */
    public async deleteNetwork(networkId: number): Promise<ApiResponse<void>> {
        if (networkId === null || networkId === undefined) {
            throw new ArgumentNullException('networkId', 'deleteNetwork');
        }

        let queryString = '';

        const requestUrl = '/networks/{network_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"network_id"}}`, encodeURIComponent(String(networkId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a network by ID
     * @param {number} networkId The ID of the network.
     */
    public async getNetwork(networkId: number): Promise<ApiResponse<Network>> {
        if (networkId === null || networkId === undefined) {
            throw new ArgumentNullException('networkId', 'getNetwork');
        }

        let queryString = '';

        const requestUrl = '/networks/{network_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Network>(requestUrl.replace(`{${"network_id"}}`, encodeURIComponent(String(networkId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Update an existing Network
     * @param {number} networkId The ID of the network.
     * @param {NetworkUpdate} networkUpdate A JSON object containing the resource data
     */
    public async updateNetwork(networkId: number, networkUpdate: NetworkUpdate): Promise<ApiResponse<void>> {
        if (networkId === null || networkId === undefined) {
            throw new ArgumentNullException('networkId', 'updateNetwork');
        }
        if (networkUpdate === null || networkUpdate === undefined) {
            throw new ArgumentNullException('networkUpdate', 'updateNetwork');
        }

        let queryString = '';

        const requestUrl = '/networks/{network_id}' + (queryString? `?${queryString}` : '');

        const response = await this.put <void, NetworkUpdate>(requestUrl.replace(`{${"network_id"}}`, encodeURIComponent(String(networkId))), networkUpdate);
        return new ApiResponse(response);
    }
}
