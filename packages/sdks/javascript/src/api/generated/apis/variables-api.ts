/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Variable } from '../../generated/models';
import { VariableUpdate } from '../../generated/models';

/**
 * VariablesApiService - Auto-generated
 */
export class VariablesApiService extends ApiBaseService {
    /**
     * 
     * @summary Delete a variable by ID
     * @param {number} variableId The id of the variable
     */
    public async deleteVariable(variableId: number): Promise<ApiResponse<void>> {
        if (variableId === null || variableId === undefined) {
            throw new ArgumentNullException('variableId', 'deleteVariable');
        }
        
        let queryString = '';

        const requestUrl = '/variables/{variable_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a variable by ID
     * @param {number} variableId The unique id of the variable
     */
    public async getVariable(variableId: number): Promise<ApiResponse<Variable>> {
        if (variableId === null || variableId === undefined) {
            throw new ArgumentNullException('variableId', 'getVariable');
        }
        
        let queryString = '';

        const requestUrl = '/variables/{variable_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Variable>(requestUrl.replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Update an existing variable
     * @param {number} variableId The unique id of the variable to be updated
     * @param {VariableUpdate} variableUpdate A JSON object containing variable data
     */
    public async updateVariable(variableId: number, variableUpdate: VariableUpdate): Promise<ApiResponse<void>> {
        if (variableId === null || variableId === undefined) {
            throw new ArgumentNullException('variableId', 'updateVariable');
        }
        if (variableUpdate === null || variableUpdate === undefined) {
            throw new ArgumentNullException('variableUpdate', 'updateVariable');
        }
        
        let queryString = '';

        const requestUrl = '/variables/{variable_id}' + (queryString? `?${queryString}` : '');

        const response = await this.put <void, VariableUpdate>(requestUrl.replace(`{${"variable_id"}}`, encodeURIComponent(String(variableId))), variableUpdate);
        return new ApiResponse(response);
    }
}
