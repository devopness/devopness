/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Credential } from '../../generated/models';
import { CredentialEnvironmentCreate } from '../../generated/models';
import { CredentialRelation } from '../../generated/models';
import { CredentialSetting } from '../../generated/models';
import { CredentialUpdate } from '../../generated/models';

/**
 * CredentialsApiService - Auto-generated
 */
export class CredentialsApiService extends ApiBaseService {
    /**
     * 
     * @summary Add a Credential to the given environment
     * @param {number} environmentId The ID of the environment.
     * @param {CredentialEnvironmentCreate} credentialEnvironmentCreate A JSON object containing the resource data
     */
    public async addEnvironmentCredential(environmentId: number, credentialEnvironmentCreate: CredentialEnvironmentCreate): Promise<ApiResponse<Credential>> {
        if (environmentId === null || environmentId === undefined) {
            throw new ArgumentNullException('environmentId', 'addEnvironmentCredential');
        }
        if (credentialEnvironmentCreate === null || credentialEnvironmentCreate === undefined) {
            throw new ArgumentNullException('credentialEnvironmentCreate', 'addEnvironmentCredential');
        }

        let queryString = '';

        const requestUrl = '/environments/{environment_id}/credentials' + (queryString? `?${queryString}` : '');

        const response = await this.post <Credential, CredentialEnvironmentCreate>(requestUrl.replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId))), credentialEnvironmentCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Delete a given credential
     * @param {number} credentialId The ID of the credential.
     */
    public async deleteCredential(credentialId: number): Promise<ApiResponse<void>> {
        if (credentialId === null || credentialId === undefined) {
            throw new ArgumentNullException('credentialId', 'deleteCredential');
        }

        let queryString = '';

        const requestUrl = '/credentials/{credential_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"credential_id"}}`, encodeURIComponent(String(credentialId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a credential by ID
     * @param {number} credentialId The ID of the credential.
     */
    public async getCredential(credentialId: number): Promise<ApiResponse<Credential>> {
        if (credentialId === null || credentialId === undefined) {
            throw new ArgumentNullException('credentialId', 'getCredential');
        }

        let queryString = '';

        const requestUrl = '/credentials/{credential_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Credential>(requestUrl.replace(`{${"credential_id"}}`, encodeURIComponent(String(credentialId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Return provider settings
     * @param {number} environmentId The ID of the environment.
     * @param {string} providerCode The code of the provider.
     */
    public async getEnvironmentCredentialSettings(environmentId: number, providerCode: string): Promise<ApiResponse<CredentialSetting>> {
        if (environmentId === null || environmentId === undefined) {
            throw new ArgumentNullException('environmentId', 'getEnvironmentCredentialSettings');
        }
        if (providerCode === null || providerCode === undefined) {
            throw new ArgumentNullException('providerCode', 'getEnvironmentCredentialSettings');
        }

        let queryString = '';

        const requestUrl = '/environments/{environment_id}/credentials/{provider_code}/settings' + (queryString? `?${queryString}` : '');

        const response = await this.get <CredentialSetting>(requestUrl.replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId))).replace(`{${"provider_code"}}`, encodeURIComponent(String(providerCode))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get current status of a credential on its provider
     * @param {number} credentialId The ID of the credential.
     */
    public async getStatusCredential(credentialId: number): Promise<ApiResponse<void>> {
        if (credentialId === null || credentialId === undefined) {
            throw new ArgumentNullException('credentialId', 'getStatusCredential');
        }

        let queryString = '';

        const requestUrl = '/credentials/{credential_id}/get-status' + (queryString? `?${queryString}` : '');

        const response = await this.post <void>(requestUrl.replace(`{${"credential_id"}}`, encodeURIComponent(String(credentialId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Return a list of all Credentials belonging to an environment
     * @param {number} environmentId The ID of the environment.
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     * @param {string} [providerCode] Filter credentials by provider code.
     * @param {string} [providerType] Filter credentials by provider type.
     */
    public async listEnvironmentCredentials(environmentId: number, page?: number, perPage?: number, providerCode?: string, providerType?: string): Promise<ApiResponse<Array<CredentialRelation>>> {
        if (environmentId === null || environmentId === undefined) {
            throw new ArgumentNullException('environmentId', 'listEnvironmentCredentials');
        }

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, provider_code: providerCode, provider_type: providerType, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/environments/{environment_id}/credentials' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<CredentialRelation>>(requestUrl.replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Update an existing Credential
     * @param {number} credentialId The ID of the credential.
     * @param {CredentialUpdate} credentialUpdate A JSON object containing the resource data
     */
    public async updateCredential(credentialId: number, credentialUpdate: CredentialUpdate): Promise<ApiResponse<void>> {
        if (credentialId === null || credentialId === undefined) {
            throw new ArgumentNullException('credentialId', 'updateCredential');
        }
        if (credentialUpdate === null || credentialUpdate === undefined) {
            throw new ArgumentNullException('credentialUpdate', 'updateCredential');
        }

        let queryString = '';

        const requestUrl = '/credentials/{credential_id}' + (queryString? `?${queryString}` : '');

        const response = await this.put <void, CredentialUpdate>(requestUrl.replace(`{${"credential_id"}}`, encodeURIComponent(String(credentialId))), credentialUpdate);
        return new ApiResponse(response);
    }
}
