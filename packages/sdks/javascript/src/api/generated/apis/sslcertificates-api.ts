/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { SslCertificate } from '../../generated/models';
import { SslCertificateEnvironmentCreate } from '../../generated/models';
import { SslCertificateRelation } from '../../generated/models';

/**
 * SSLCertificatesApiService - Auto-generated
 */
export class SSLCertificatesApiService extends ApiBaseService {
    /**
     * 
     * @summary Create a new ssl certificate
     * @param {number} environmentId The ID of the environment.
     * @param {SslCertificateEnvironmentCreate} sslCertificateEnvironmentCreate A JSON object containing the resource data
     */
    public async addEnvironmentSslCertificate(environmentId: number, sslCertificateEnvironmentCreate: SslCertificateEnvironmentCreate): Promise<ApiResponse<SslCertificate>> {
        if (environmentId === null || environmentId === undefined) {
            throw new ArgumentNullException('environmentId', 'addEnvironmentSslCertificate');
        }
        if (sslCertificateEnvironmentCreate === null || sslCertificateEnvironmentCreate === undefined) {
            throw new ArgumentNullException('sslCertificateEnvironmentCreate', 'addEnvironmentSslCertificate');
        }

        let queryString = '';

        const requestUrl = '/environments/{environment_id}/ssl-certificates' + (queryString? `?${queryString}` : '');

        const response = await this.post <SslCertificate, SslCertificateEnvironmentCreate>(requestUrl.replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId))), sslCertificateEnvironmentCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Delete a given SSL Certificate
     * @param {number} sslCertificateId The ID of the ssl certificate.
     */
    public async deleteSslCertificate(sslCertificateId: number): Promise<ApiResponse<void>> {
        if (sslCertificateId === null || sslCertificateId === undefined) {
            throw new ArgumentNullException('sslCertificateId', 'deleteSslCertificate');
        }

        let queryString = '';

        const requestUrl = '/ssl-certificates/{ssl_certificate_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"ssl_certificate_id"}}`, encodeURIComponent(String(sslCertificateId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get details of a single SSL certificate
     * @param {number} sslCertificateId The ID of the ssl certificate.
     */
    public async getSslCertificate(sslCertificateId: number): Promise<ApiResponse<SslCertificate>> {
        if (sslCertificateId === null || sslCertificateId === undefined) {
            throw new ArgumentNullException('sslCertificateId', 'getSslCertificate');
        }

        let queryString = '';

        const requestUrl = '/ssl-certificates/{ssl_certificate_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <SslCertificate>(requestUrl.replace(`{${"ssl_certificate_id"}}`, encodeURIComponent(String(sslCertificateId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Return a list of all SSL Certificates belonging to an environment
     * @param {number} environmentId The ID of the environment.
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listEnvironmentSslCertificates(environmentId: number, page?: number, perPage?: number): Promise<ApiResponse<Array<SslCertificateRelation>>> {
        if (environmentId === null || environmentId === undefined) {
            throw new ArgumentNullException('environmentId', 'listEnvironmentSslCertificates');
        }

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/environments/{environment_id}/ssl-certificates' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<SslCertificateRelation>>(requestUrl.replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId))));
        return new ApiResponse(response);
    }
}
