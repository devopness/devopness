/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { ApiToken } from '../../generated/models';
import { ApiTokenProjectCreate } from '../../generated/models';
import { ApiTokenProjectRotate } from '../../generated/models';
import { ApiTokenRelation } from '../../generated/models';
import { ApiTokenRotateResponse } from '../../generated/models';

/**
 * ProjectsApiTokensApiService - Auto-generated
 */
export class ProjectsApiTokensApiService extends ApiBaseService {
    /**
     * 
     * @summary Create a new api token for specific project.
     * @param {number} projectId The ID of the project.
     * @param {ApiTokenProjectCreate} apiTokenProjectCreate A JSON object containing the resource data
     */
    public async addProjectApiToken(projectId: number, apiTokenProjectCreate: ApiTokenProjectCreate): Promise<ApiResponse<ApiToken>> {
        if (projectId === null || projectId === undefined) {
            throw new ArgumentNullException('projectId', 'addProjectApiToken');
        }
        if (apiTokenProjectCreate === null || apiTokenProjectCreate === undefined) {
            throw new ArgumentNullException('apiTokenProjectCreate', 'addProjectApiToken');
        }

        let queryString = '';

        const requestUrl = '/projects/{project_id}/tokens' + (queryString? `?${queryString}` : '');

        const response = await this.post <ApiToken, ApiTokenProjectCreate>(requestUrl.replace(`{${"project_id"}}`, encodeURIComponent(String(projectId))), apiTokenProjectCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get details of a specific project api token.
     * @param {number} projectId The ID of the project.
     * @param {string} tokenId The ID of the token.
     */
    public async getProjectApiToken(projectId: number, tokenId: string): Promise<ApiResponse<ApiToken>> {
        if (projectId === null || projectId === undefined) {
            throw new ArgumentNullException('projectId', 'getProjectApiToken');
        }
        if (tokenId === null || tokenId === undefined) {
            throw new ArgumentNullException('tokenId', 'getProjectApiToken');
        }

        let queryString = '';

        const requestUrl = '/projects/{project_id}/tokens/{token_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <ApiToken>(requestUrl.replace(`{${"project_id"}}`, encodeURIComponent(String(projectId))).replace(`{${"token_id"}}`, encodeURIComponent(String(tokenId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List the api tokens of specific project.
     * @param {number} projectId The ID of the project.
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listProjectApiTokens(projectId: number, page?: number, perPage?: number): Promise<ApiResponse<Array<ApiTokenRelation>>> {
        if (projectId === null || projectId === undefined) {
            throw new ArgumentNullException('projectId', 'listProjectApiTokens');
        }

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/projects/{project_id}/tokens' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<ApiTokenRelation>>(requestUrl.replace(`{${"project_id"}}`, encodeURIComponent(String(projectId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Revoke a specific project api token.
     * @param {number} projectId The ID of the project.
     * @param {string} tokenId The ID of the token.
     */
    public async revokeProjectApiToken(projectId: number, tokenId: string): Promise<ApiResponse<void>> {
        if (projectId === null || projectId === undefined) {
            throw new ArgumentNullException('projectId', 'revokeProjectApiToken');
        }
        if (tokenId === null || tokenId === undefined) {
            throw new ArgumentNullException('tokenId', 'revokeProjectApiToken');
        }

        let queryString = '';

        const requestUrl = '/projects/{project_id}/tokens/{token_id}/revoke' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"project_id"}}`, encodeURIComponent(String(projectId))).replace(`{${"token_id"}}`, encodeURIComponent(String(tokenId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Rotate a specific project api token.
     * @param {number} projectId The ID of the project.
     * @param {string} tokenId The ID of the token.
     * @param {ApiTokenProjectRotate} apiTokenProjectRotate A JSON object containing the resource data
     */
    public async rotateProjectApiToken(projectId: number, tokenId: string, apiTokenProjectRotate: ApiTokenProjectRotate): Promise<ApiResponse<ApiTokenRotateResponse>> {
        if (projectId === null || projectId === undefined) {
            throw new ArgumentNullException('projectId', 'rotateProjectApiToken');
        }
        if (tokenId === null || tokenId === undefined) {
            throw new ArgumentNullException('tokenId', 'rotateProjectApiToken');
        }
        if (apiTokenProjectRotate === null || apiTokenProjectRotate === undefined) {
            throw new ArgumentNullException('apiTokenProjectRotate', 'rotateProjectApiToken');
        }

        let queryString = '';

        const requestUrl = '/projects/{project_id}/tokens/{token_id}/rotate' + (queryString? `?${queryString}` : '');

        const response = await this.post <ApiTokenRotateResponse, ApiTokenProjectRotate>(requestUrl.replace(`{${"project_id"}}`, encodeURIComponent(String(projectId))).replace(`{${"token_id"}}`, encodeURIComponent(String(tokenId))), apiTokenProjectRotate);
        return new ApiResponse(response);
    }
}
