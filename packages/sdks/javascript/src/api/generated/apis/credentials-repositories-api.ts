/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Repository } from '../../generated/models';
import { RepositoryRelation } from '../../generated/models';

/**
 * CredentialsRepositoriesApiService - Auto-generated
 */
export class CredentialsRepositoriesApiService extends ApiBaseService {
    /**
     * 
     * @summary Get details of a repository by its name
     * @param {number} credentialId The ID of the credential.
     * @param {string} repositoryName The repository name
     * @param {string} repositoryOwner The owner of the repository
     */
    public async getCredentialRepository(credentialId: number, repositoryName: string, repositoryOwner: string): Promise<ApiResponse<Repository>> {
        if (credentialId === null || credentialId === undefined) {
            throw new ArgumentNullException('credentialId', 'getCredentialRepository');
        }
        if (repositoryName === null || repositoryName === undefined) {
            throw new ArgumentNullException('repositoryName', 'getCredentialRepository');
        }
        if (repositoryOwner === null || repositoryOwner === undefined) {
            throw new ArgumentNullException('repositoryOwner', 'getCredentialRepository');
        }

        let queryString = '';

        const requestUrl = '/credentials/{credential_id}/repositories/{repository_owner}/{repository_name}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Repository>(requestUrl.replace(`{${"credential_id"}}`, encodeURIComponent(String(credentialId))).replace(`{${"repository_name"}}`, encodeURIComponent(String(repositoryName))).replace(`{${"repository_owner"}}`, encodeURIComponent(String(repositoryOwner))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Return a list of all repositories belonging to the source provider linked to the credential
     * @param {number} credentialId The ID of the credential.
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listCredentialRepositories(credentialId: number, page?: number, perPage?: number): Promise<ApiResponse<Array<RepositoryRelation>>> {
        if (credentialId === null || credentialId === undefined) {
            throw new ArgumentNullException('credentialId', 'listCredentialRepositories');
        }

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/credentials/{credential_id}/repositories' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<RepositoryRelation>>(requestUrl.replace(`{${"credential_id"}}`, encodeURIComponent(String(credentialId))));
        return new ApiResponse(response);
    }
}
