/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { CronJob } from '../../generated/models';
import { CronJobEnvironmentCreate } from '../../generated/models';
import { CronJobRelation } from '../../generated/models';
import { CronJobUpdate } from '../../generated/models';

/**
 * CronJobsApiService - Auto-generated
 */
export class CronJobsApiService extends ApiBaseService {
    /**
     * 
     * @summary Add a Cron Job to the given environment
     * @param {number} environmentId The ID of the environment.
     * @param {CronJobEnvironmentCreate} cronJobEnvironmentCreate A JSON object containing the resource data
     */
    public async addEnvironmentCronJob(environmentId: number, cronJobEnvironmentCreate: CronJobEnvironmentCreate): Promise<ApiResponse<CronJob>> {
        if (environmentId === null || environmentId === undefined) {
            throw new ArgumentNullException('environmentId', 'addEnvironmentCronJob');
        }
        if (cronJobEnvironmentCreate === null || cronJobEnvironmentCreate === undefined) {
            throw new ArgumentNullException('cronJobEnvironmentCreate', 'addEnvironmentCronJob');
        }

        let queryString = '';

        const requestUrl = '/environments/{environment_id}/cron-jobs' + (queryString? `?${queryString}` : '');

        const response = await this.post <CronJob, CronJobEnvironmentCreate>(requestUrl.replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId))), cronJobEnvironmentCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Delete a given Cron Job
     * @param {number} cronJobId The ID of the cron job.
     */
    public async deleteCronJob(cronJobId: number): Promise<ApiResponse<void>> {
        if (cronJobId === null || cronJobId === undefined) {
            throw new ArgumentNullException('cronJobId', 'deleteCronJob');
        }

        let queryString = '';

        const requestUrl = '/cron-jobs/{cron_job_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"cron_job_id"}}`, encodeURIComponent(String(cronJobId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a Cron Job by ID
     * @param {number} cronJobId The ID of the cron job.
     */
    public async getCronJob(cronJobId: number): Promise<ApiResponse<CronJob>> {
        if (cronJobId === null || cronJobId === undefined) {
            throw new ArgumentNullException('cronJobId', 'getCronJob');
        }

        let queryString = '';

        const requestUrl = '/cron-jobs/{cron_job_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <CronJob>(requestUrl.replace(`{${"cron_job_id"}}`, encodeURIComponent(String(cronJobId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Return a list of all Cron Jobs belonging to an environment
     * @param {number} environmentId The ID of the environment.
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listEnvironmentCronJobs(environmentId: number, page?: number, perPage?: number): Promise<ApiResponse<Array<CronJobRelation>>> {
        if (environmentId === null || environmentId === undefined) {
            throw new ArgumentNullException('environmentId', 'listEnvironmentCronJobs');
        }

        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/environments/{environment_id}/cron-jobs' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<CronJobRelation>>(requestUrl.replace(`{${"environment_id"}}`, encodeURIComponent(String(environmentId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Update an existing Cron Job
     * @param {number} cronJobId The ID of the cron job.
     * @param {CronJobUpdate} cronJobUpdate A JSON object containing the resource data
     */
    public async updateCronJob(cronJobId: number, cronJobUpdate: CronJobUpdate): Promise<ApiResponse<void>> {
        if (cronJobId === null || cronJobId === undefined) {
            throw new ArgumentNullException('cronJobId', 'updateCronJob');
        }
        if (cronJobUpdate === null || cronJobUpdate === undefined) {
            throw new ArgumentNullException('cronJobUpdate', 'updateCronJob');
        }

        let queryString = '';

        const requestUrl = '/cron-jobs/{cron_job_id}' + (queryString? `?${queryString}` : '');

        const response = await this.put <void, CronJobUpdate>(requestUrl.replace(`{${"cron_job_id"}}`, encodeURIComponent(String(cronJobId))), cronJobUpdate);
        return new ApiResponse(response);
    }
}
