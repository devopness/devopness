"""
Devopness API Python SDK - Painless essential DevOps to everyone

Note:
    This is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
"""

from urllib.parse import urlencode
from .. import DevopnessBaseService, DevopnessResponse
{{#imports}}
{{import}}
{{/imports}}


class {{classname}}Service(DevopnessBaseService):
    """
    {{classname}}Service - Auto Generated
    """
{{#operations}}
{{#operation}}

    async def {{operationId}}(
        self,
{{#allParams}}
    {{^isHeaderParam}}
        {{paramName}}: {{^required}}Optional[{{/required}}{{dataType}}{{^required}}] = None{{/required}},
    {{/isHeaderParam}}
{{/allParams}}
    ) -> {{#returnType}}DevopnessResponse[{{{returnType}}}]{{/returnType}}{{^returnType}}DevopnessResponse{{/returnType}}:
        """
        {{#summary}}
        {{&summary}}
        {{/summary}}
        """
        {{#hasQueryParams}}

        params = dict(
          {{#queryParams}}
          {{baseName}}={{paramName}},
          {{/queryParams}}
        )

        query_params = dict()
        for key, value in params.items():
            if value is None:
                continue

            query_params[key] = value

        query_string = urlencode(query_params)
        {{/hasQueryParams}}

        endpoint: str = {{#pathParams}}f"{{{path}}}"{{/pathParams}}{{^pathParams}}"{{{path}}}"{{/pathParams}}{{#hasQueryParams}} + f"?{query_string}"{{/hasQueryParams}}

        response = await self._{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}(endpoint{{#allParams}}{{^isHeaderParam}}{{#-last}}{{^isPrimitiveType}}, {{paramName}}{{/isPrimitiveType}}{{/-last}}{{/isHeaderParam}}{{/allParams}})

        return DevopnessResponse(response{{#returnType}}, {{{returnType}}}{{/returnType}})

    def {{operationId}}_sync(
        self,
{{#allParams}}
    {{^isHeaderParam}}
        {{paramName}}: {{^required}}Optional[{{/required}}{{dataType}}{{^required}}] = None{{/required}},
    {{/isHeaderParam}}
{{/allParams}}
    ) -> {{#returnType}}DevopnessResponse[{{{returnType}}}]{{/returnType}}{{^returnType}}DevopnessResponse{{/returnType}}:
        """
        {{#summary}}
        {{&summary}}
        {{/summary}}
        """
        {{#hasQueryParams}}

        params = dict(
          {{#queryParams}}
          {{baseName}}={{paramName}},
          {{/queryParams}}
        )

        query_params = dict()
        for key, value in params.items():
            if value is None:
                continue

            query_params[key] = value

        query_string = urlencode(query_params)
        {{/hasQueryParams}}

        endpoint: str = {{#pathParams}}f"{{{path}}}"{{/pathParams}}{{^pathParams}}"{{{path}}}"{{/pathParams}}{{#hasQueryParams}} + f"?{query_string}"{{/hasQueryParams}}

        response = self._{{#lambda.lowercase}}{{httpMethod}}_sync{{/lambda.lowercase}}(endpoint{{#allParams}}{{^isHeaderParam}}{{#-last}}{{^isPrimitiveType}}, {{paramName}}{{/isPrimitiveType}}{{/-last}}{{/isHeaderParam}}{{/allParams}})

        return DevopnessResponse(response{{#returnType}}, {{{returnType}}}{{/returnType}})
{{/operation}}
{{/operations}}
