"""
Devopness API Python SDK - Painless essential DevOps to everyone

Note:
    This is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
"""

from .. import DevopnessBaseService, DevopnessResponse
from ..models.user import User
from ..models.user_activity import UserActivity
from ..models.user_billing import UserBilling
from ..models.user_create import UserCreate
from ..models.user_login import UserLogin
from ..models.user_login_response import UserLoginResponse
from ..models.user_me import UserMe
from ..models.user_refresh_token import UserRefreshToken
from ..models.user_refresh_token_response import UserRefreshTokenResponse
from ..models.user_resend_verification import UserResendVerification
from ..models.user_update import UserUpdate
from ..models.user_url import UserUrl
from ..models.user_verify import UserVerify


class UsersApiService(DevopnessBaseService):
    """
    UsersApiService - Auto Generated
    """

    async def add_user(
        self,
        user_create: UserCreate,
    ) -> DevopnessResponse:
        """
        Sign up/register a new user
        """

        endpoint: str = "/users"

        response = await self._post(endpoint, user_create)

        return DevopnessResponse(response)

    def add_user_sync(
        self,
        user_create: UserCreate,
    ) -> DevopnessResponse:
        """
        Sign up/register a new user
        """

        endpoint: str = "/users"

        response = self._post_sync(endpoint, user_create)

        return DevopnessResponse(response)

    async def get_user(
        self,
        user_id: str,
    ) -> DevopnessResponse[User]:
        """
        Get a user by ID or URL Slug
        """

        endpoint: str = f"/users/{user_id}"

        response = await self._get(endpoint)

        return DevopnessResponse(response, User)

    def get_user_sync(
        self,
        user_id: str,
    ) -> DevopnessResponse[User]:
        """
        Get a user by ID or URL Slug
        """

        endpoint: str = f"/users/{user_id}"

        response = self._get_sync(endpoint)

        return DevopnessResponse(response, User)

    async def get_user_activity(
        self,
        user_id: str,
    ) -> DevopnessResponse[UserActivity]:
        """
        Get activity information for a user
        """

        endpoint: str = f"/users/{user_id}/activity"

        response = await self._get(endpoint)

        return DevopnessResponse(response, UserActivity)

    def get_user_activity_sync(
        self,
        user_id: str,
    ) -> DevopnessResponse[UserActivity]:
        """
        Get activity information for a user
        """

        endpoint: str = f"/users/{user_id}/activity"

        response = self._get_sync(endpoint)

        return DevopnessResponse(response, UserActivity)

    async def get_user_billing(
        self,
    ) -> DevopnessResponse[UserBilling]:
        """
        Get current user's billing info for active subscription
        """

        endpoint: str = "/users/billing"

        response = await self._get(endpoint)

        return DevopnessResponse(response, UserBilling)

    def get_user_billing_sync(
        self,
    ) -> DevopnessResponse[UserBilling]:
        """
        Get current user's billing info for active subscription
        """

        endpoint: str = "/users/billing"

        response = self._get_sync(endpoint)

        return DevopnessResponse(response, UserBilling)

    async def get_user_logout(
        self,
    ) -> DevopnessResponse:
        """
        Logout/revoke an existing token
        """

        endpoint: str = "/users/logout"

        response = await self._get(endpoint)

        return DevopnessResponse(response)

    def get_user_logout_sync(
        self,
    ) -> DevopnessResponse:
        """
        Logout/revoke an existing token
        """

        endpoint: str = "/users/logout"

        response = self._get_sync(endpoint)

        return DevopnessResponse(response)

    async def get_user_me(
        self,
    ) -> DevopnessResponse[UserMe]:
        """
        Get details of the current user
        """

        endpoint: str = "/users/me"

        response = await self._get(endpoint)

        return DevopnessResponse(response, UserMe)

    def get_user_me_sync(
        self,
    ) -> DevopnessResponse[UserMe]:
        """
        Get details of the current user
        """

        endpoint: str = "/users/me"

        response = self._get_sync(endpoint)

        return DevopnessResponse(response, UserMe)

    async def get_user_urls(
        self,
    ) -> DevopnessResponse[UserUrl]:
        """
        Get the authenticated user's URLs
        """

        endpoint: str = "/users/urls"

        response = await self._get(endpoint)

        return DevopnessResponse(response, UserUrl)

    def get_user_urls_sync(
        self,
    ) -> DevopnessResponse[UserUrl]:
        """
        Get the authenticated user's URLs
        """

        endpoint: str = "/users/urls"

        response = self._get_sync(endpoint)

        return DevopnessResponse(response, UserUrl)

    async def login_user(
        self,
        user_login: UserLogin,
    ) -> DevopnessResponse[UserLoginResponse]:
        """
        Login/create a new token for the given credentials
        """

        endpoint: str = "/users/login"

        response = await self._post(endpoint, user_login)

        return DevopnessResponse(response, UserLoginResponse)

    def login_user_sync(
        self,
        user_login: UserLogin,
    ) -> DevopnessResponse[UserLoginResponse]:
        """
        Login/create a new token for the given credentials
        """

        endpoint: str = "/users/login"

        response = self._post_sync(endpoint, user_login)

        return DevopnessResponse(response, UserLoginResponse)

    async def refresh_token_user(
        self,
        user_refresh_token: UserRefreshToken,
    ) -> DevopnessResponse[UserRefreshTokenResponse]:
        """
        Refresh an existing user access token
        """

        endpoint: str = "/users/refresh-token"

        response = await self._post(endpoint, user_refresh_token)

        return DevopnessResponse(response, UserRefreshTokenResponse)

    def refresh_token_user_sync(
        self,
        user_refresh_token: UserRefreshToken,
    ) -> DevopnessResponse[UserRefreshTokenResponse]:
        """
        Refresh an existing user access token
        """

        endpoint: str = "/users/refresh-token"

        response = self._post_sync(endpoint, user_refresh_token)

        return DevopnessResponse(response, UserRefreshTokenResponse)

    async def resend_verification_user(
        self,
        user_resend_verification: UserResendVerification,
    ) -> DevopnessResponse:
        """
        Resend the verification email
        """

        endpoint: str = "/users/account/resend-verification"

        response = await self._post(endpoint, user_resend_verification)

        return DevopnessResponse(response)

    def resend_verification_user_sync(
        self,
        user_resend_verification: UserResendVerification,
    ) -> DevopnessResponse:
        """
        Resend the verification email
        """

        endpoint: str = "/users/account/resend-verification"

        response = self._post_sync(endpoint, user_resend_verification)

        return DevopnessResponse(response)

    async def update_user(
        self,
        user_id: str,
        user_update: UserUpdate,
    ) -> DevopnessResponse:
        """
        Update an existing user
        """

        endpoint: str = f"/users/{user_id}"

        response = await self._put(endpoint, user_update)

        return DevopnessResponse(response)

    def update_user_sync(
        self,
        user_id: str,
        user_update: UserUpdate,
    ) -> DevopnessResponse:
        """
        Update an existing user
        """

        endpoint: str = f"/users/{user_id}"

        response = self._put_sync(endpoint, user_update)

        return DevopnessResponse(response)

    async def verify_user(
        self,
        user_verify: UserVerify,
    ) -> DevopnessResponse:
        """
        Activate the user account
        """

        endpoint: str = "/users/account/verify"

        response = await self._post(endpoint, user_verify)

        return DevopnessResponse(response)

    def verify_user_sync(
        self,
        user_verify: UserVerify,
    ) -> DevopnessResponse:
        """
        Activate the user account
        """

        endpoint: str = "/users/account/verify"

        response = self._post_sync(endpoint, user_verify)

        return DevopnessResponse(response)
