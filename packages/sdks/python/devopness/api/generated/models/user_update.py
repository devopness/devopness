"""
Devopness API Python SDK - Painless essential DevOps to everyone

Note:
    This is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from .language import Language
from typing import Optional, Set
from typing_extensions import Self


class UserUpdate(BaseModel):
    """
    UserUpdate

    Attributes:
        id (str): The unique ID of the given User.
        name (str): User&#39;s full name. Must be at least 5 characters. Must not be greater than 60 characters.
        email (str): The e-mail that will uniquely identify the user on the system and become its login credential. Must be a valid email address.
        url_slug (str): The URL Slug of the user. Must not be greater than 255 characters.
        language (Language, optional):
    """

    id: StrictStr = Field(description="The unique ID of the given User.")
    name: StrictStr = Field(
        description="User's full name. Must be at least 5 characters. Must not be greater than 60 characters."
    )
    email: StrictStr = Field(
        description="The e-mail that will uniquely identify the user on the system and become its login credential. Must be a valid email address."
    )
    url_slug: StrictStr = Field(
        description="The URL Slug of the user. Must not be greater than 255 characters."
    )
    language: Optional[Language] = None
    __properties: ClassVar[List[str]] = ["id", "name", "email", "url_slug", "language"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict["language"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "email": obj.get("email"),
                "url_slug": obj.get("url_slug"),
                "language": obj.get("language"),
            }
        )
        return _obj
