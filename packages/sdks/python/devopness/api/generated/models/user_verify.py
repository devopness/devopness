"""
Devopness API Python SDK - Painless essential DevOps to everyone

Note:
    This is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserVerify(BaseModel):
    """
    UserVerify

    Attributes:
        email (str): The email of the user&#39;s account. Must be a valid email address. Must not be greater than 255 characters.
        token (str): The security token of the account. Must not be greater than 255 characters.
        name (str): The new user name to account. Must be at least 3 characters. Must not be greater than 255 characters.
        url_slug (str, optional): The URL Slug of the account. Must not be greater than 255 characters.
        password (str): The new password to account. Must be at least 8 characters.
    """

    email: StrictStr = Field(description="The email of the user's account. Must be a valid email address. Must not be greater than 255 characters.")
    token: StrictStr = Field(description="The security token of the account. Must not be greater than 255 characters.")
    name: StrictStr = Field(description="The new user name to account. Must be at least 3 characters. Must not be greater than 255 characters.")
    url_slug: Optional[StrictStr] = Field(default=None, description="The URL Slug of the account. Must not be greater than 255 characters.")
    password: StrictStr = Field(description="The new password to account. Must be at least 8 characters.")
    __properties: ClassVar[List[str]] = ["email", "token", "name", "url_slug", "password"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserVerify from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserVerify from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "token": obj.get("token"),
            "name": obj.get("name"),
            "url_slug": obj.get("url_slug"),
            "password": obj.get("password")
        })
        return _obj


