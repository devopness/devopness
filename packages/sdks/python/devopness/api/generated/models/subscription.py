"""
Devopness API Python SDK - Painless essential DevOps to everyone

Note:
    This is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from .subscription_balance import SubscriptionBalance
from typing import Optional, Set
from typing_extensions import Self


class Subscription(BaseModel):
    """
    The user's active subscription

    Attributes:
        id (int, optional): The ID of the subscription
        user_id (int, optional): The ID of the user this subscription belongs to
        plan_name (str, optional): The plan name of this subscription
        status (str, optional): Status of this subscription
        quantity (int, optional): Amount of plans purchased in this subscription
        price_unit (float, optional): Unitary price of the subscribed plan
        price_total (float, optional): Total price of this subscription (quantity x price_unit)
        price_currency (str, optional): Currency of the prices
        cancelled_at (datetime, optional): If not null, indicates the date when this subscription was cancelled
        ends_at (datetime, optional): Indicates the date and time when this subscription ends
        created_at (datetime, optional): The date and time when the record was created
        updated_at (datetime, optional): The date and time when the record was last updated
        current_balance (SubscriptionBalance, optional):
        balances (List[SubscriptionBalance], optional): The list of subscription balances
    """

    id: Optional[StrictInt] = Field(
        default=None, description="The ID of the subscription"
    )
    user_id: Optional[StrictInt] = Field(
        default=None, description="The ID of the user this subscription belongs to"
    )
    plan_name: Optional[StrictStr] = Field(
        default=None, description="The plan name of this subscription"
    )
    status: Optional[StrictStr] = Field(
        default=None, description="Status of this subscription"
    )
    quantity: Optional[StrictInt] = Field(
        default=None, description="Amount of plans purchased in this subscription"
    )
    price_unit: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Unitary price of the subscribed plan"
    )
    price_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Total price of this subscription (quantity x price_unit)",
    )
    price_currency: Optional[StrictStr] = Field(
        default=None, description="Currency of the prices"
    )
    cancelled_at: Optional[datetime] = Field(
        default=None,
        description="If not null, indicates the date when this subscription was cancelled",
    )
    ends_at: Optional[datetime] = Field(
        default=None,
        description="Indicates the date and time when this subscription ends",
    )
    created_at: Optional[datetime] = Field(
        default=None, description="The date and time when the record was created"
    )
    updated_at: Optional[datetime] = Field(
        default=None, description="The date and time when the record was last updated"
    )
    current_balance: Optional[SubscriptionBalance] = None
    balances: Optional[List[Optional[SubscriptionBalance]]] = Field(
        default=None, description="The list of subscription balances"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "user_id",
        "plan_name",
        "status",
        "quantity",
        "price_unit",
        "price_total",
        "price_currency",
        "cancelled_at",
        "ends_at",
        "created_at",
        "updated_at",
        "current_balance",
        "balances",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_balance
        if self.current_balance:
            _dict["current_balance"] = self.current_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in balances (list)
        _items = []
        if self.balances:
            for _item_balances in self.balances:
                if _item_balances:
                    _items.append(_item_balances.to_dict())
            _dict["balances"] = _items
        # set to None if cancelled_at (nullable) is None
        # and model_fields_set contains the field
        if self.cancelled_at is None and "cancelled_at" in self.model_fields_set:
            _dict["cancelled_at"] = None

        # set to None if current_balance (nullable) is None
        # and model_fields_set contains the field
        if self.current_balance is None and "current_balance" in self.model_fields_set:
            _dict["current_balance"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "user_id": obj.get("user_id"),
                "plan_name": obj.get("plan_name"),
                "status": obj.get("status"),
                "quantity": obj.get("quantity"),
                "price_unit": obj.get("price_unit"),
                "price_total": obj.get("price_total"),
                "price_currency": obj.get("price_currency"),
                "cancelled_at": obj.get("cancelled_at"),
                "ends_at": obj.get("ends_at"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "current_balance": SubscriptionBalance.from_dict(obj["current_balance"])
                if obj.get("current_balance") is not None
                else None,
                "balances": [
                    SubscriptionBalance.from_dict(_item) for _item in obj["balances"]
                ]
                if obj.get("balances") is not None
                else None,
            }
        )
        return _obj
