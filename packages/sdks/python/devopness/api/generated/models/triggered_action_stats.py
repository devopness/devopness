"""
Devopness API Python SDK - Painless essential DevOps to everyone

Note:
    This is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from .triggered_action_summary import TriggeredActionSummary
from typing import Optional, Set
from typing_extensions import Self


class TriggeredActionStats(BaseModel):
    """
    Information about the action that was triggered

    Attributes:
        resource_type (str, optional): Type of resource used in the action
        action_type (str, optional): Type of action
        resource_type_human_readable (str, optional): Human readable version of the resource type
        action_type_human_readable (str, optional): Type of action human readable
        summary (TriggeredActionSummary, optional):
    """

    resource_type: Optional[StrictStr] = Field(
        default=None, description="Type of resource used in the action"
    )
    action_type: Optional[StrictStr] = Field(default=None, description="Type of action")
    resource_type_human_readable: Optional[StrictStr] = Field(
        default=None, description="Human readable version of the resource type"
    )
    action_type_human_readable: Optional[StrictStr] = Field(
        default=None, description="Type of action human readable"
    )
    summary: Optional[TriggeredActionSummary] = None
    __properties: ClassVar[List[str]] = [
        "resource_type",
        "action_type",
        "resource_type_human_readable",
        "action_type_human_readable",
        "summary",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TriggeredActionStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict["summary"] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TriggeredActionStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "resource_type": obj.get("resource_type"),
                "action_type": obj.get("action_type"),
                "resource_type_human_readable": obj.get("resource_type_human_readable"),
                "action_type_human_readable": obj.get("action_type_human_readable"),
                "summary": TriggeredActionSummary.from_dict(obj["summary"])
                if obj.get("summary") is not None
                else None,
            }
        )
        return _obj
