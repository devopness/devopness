"""
Devopness API Python SDK - Painless essential DevOps to everyone

Note:
    This is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from .credits import Credits
from typing import Optional, Set
from typing_extensions import Self


class SubscriptionBalance(BaseModel):
    """
    The user's active subscription balance

    Attributes:
        credits (Credits, optional):
        unit (str, optional): The unit of measurement to count credits
        billing_period_started_at (datetime, optional): The date and time the subscription plan starts
        billing_period_ends_at (datetime, optional): The date and time the subscription plan ends
        created_at (datetime, optional): The date and time when the record was created
        updated_at (datetime, optional): The date and time when the record was last updated
    """

    credits: Optional[Credits] = None
    unit: Optional[StrictStr] = Field(
        default=None, description="The unit of measurement to count credits"
    )
    billing_period_started_at: Optional[datetime] = Field(
        default=None, description="The date and time the subscription plan starts"
    )
    billing_period_ends_at: Optional[datetime] = Field(
        default=None, description="The date and time the subscription plan ends"
    )
    created_at: Optional[datetime] = Field(
        default=None, description="The date and time when the record was created"
    )
    updated_at: Optional[datetime] = Field(
        default=None, description="The date and time when the record was last updated"
    )
    __properties: ClassVar[List[str]] = [
        "credits",
        "unit",
        "billing_period_started_at",
        "billing_period_ends_at",
        "created_at",
        "updated_at",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credits
        if self.credits:
            _dict["credits"] = self.credits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionBalance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "credits": Credits.from_dict(obj["credits"])
                if obj.get("credits") is not None
                else None,
                "unit": obj.get("unit"),
                "billing_period_started_at": obj.get("billing_period_started_at"),
                "billing_period_ends_at": obj.get("billing_period_ends_at"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
            }
        )
        return _obj
