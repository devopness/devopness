"""
Devopness API Python SDK - Painless essential DevOps to everyone

Note:
    This is auto generated by OpenAPI Generator.
    https://openapi-generator.tech
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class Credits(BaseModel):
    """
    The user's active subscription credits

    Attributes:
        limit (float, optional): Total credits that can be used to perform actions in the subscription period
        used (float, optional): Total credits that were used to perform actions
        remaining (float, optional): Total credits available to use to perform actions
    """

    limit: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Total credits that can be used to perform actions in the subscription period",
    )
    used: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Total credits that were used to perform actions"
    )
    remaining: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Total credits available to use to perform actions"
    )
    __properties: ClassVar[List[str]] = ["limit", "used", "remaining"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Credits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Credits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "limit": obj.get("limit"),
                "used": obj.get("used"),
                "remaining": obj.get("remaining"),
            }
        )
        return _obj
