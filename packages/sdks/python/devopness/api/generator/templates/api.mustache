from urllib.parse import urlencode  # noqa: F401
{{#imports}}
{{import}}
{{/imports}}

from devopness.common import ApiResponse
from devopness.services import ApiBaseService


class {{classname}}Service(ApiBaseService):
    """
    {{classname}}Service - Auto Generated
    """
{{#operations}}
{{#operation}}

    async def {{operationId}}(
        self,
{{#allParams}}
    {{^isHeaderParam}}
        {{paramName}}: {{^required}}Optional[{{/required}}{{dataType}}{{^required}}] = None{{/required}},
    {{/isHeaderParam}}
{{/allParams}}
    ) -> {{#returnType}}ApiResponse[{{{returnType}}}]{{/returnType}}{{^returnType}}ApiResponse{{/returnType}}:
        """
        {{#summary}}
        {{&summary}}
        {{/summary}}
        """
        {{#hasQueryParams}}

        params = dict(
          {{#queryParams}}
          {{baseName}}={{paramName}},
          {{/queryParams}}
        )

        query_params = dict()
        for key, value in params.items():
            if value is None:
                continue

            query_params[key] = value

        query_string = urlencode(query_params)
        {{/hasQueryParams}}

        endpoint: str = {{#pathParams}}f"{{{path}}}"{{/pathParams}}{{^pathParams}}"{{{path}}}"{{/pathParams}}{{#hasQueryParams}} + f"?{query_string}"{{/hasQueryParams}}

        response = await self.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}(endpoint{{#allParams}}{{^isHeaderParam}}{{#-last}}{{^isPrimitiveType}}, {{paramName}}{{/isPrimitiveType}}{{/-last}}{{/isHeaderParam}}{{/allParams}})

        return ApiResponse(response)
{{/operation}}
{{/operations}}
