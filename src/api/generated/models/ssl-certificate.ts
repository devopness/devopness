/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface SslCertificate
 */
export interface SslCertificate {
    /**
     * The unique id of the given record
     * @type {number}
     * @memberof SslCertificate
     */
    id: number;
    /**
     * The list of domain names to which the SSL certificate refers to
     * @type {Array<string>}
     * @memberof SslCertificate
     */
    domains: Array<string>;
    /**
     * The entity or certification authority (CA) who issued the certificate
     * @type {string}
     * @memberof SslCertificate
     */
    issuer: SslCertificateIssuerEnum;
    /**
     * The certificate type, indicating its scope
     * @type {string}
     * @memberof SslCertificate
     */
    type: SslCertificateTypeEnum;
    /**
     * The level of validation applied when issuing the certificate. This can be one out of the three validation levels conforming to public key certificates standards: `DV (Domain Validation)`, `OV (Organization validation)` or `EV (Extended Validation)`
     * @type {string}
     * @memberof SslCertificate
     */
    validation_level: SslCertificateValidationLevelEnum;
    /**
     * The private key provided by the Certification Authority, when the certificate has not being automatically issued through `devopness`
     * @type {string}
     * @memberof SslCertificate
     */
    custom_private_key?: string;
    /**
     * The contents of the certificate provided by the Certification Authority, when the certificate has not being automatically issued through `devopness`
     * @type {string}
     * @memberof SslCertificate
     */
    custom_certificate?: string;
    /**
     * Current status of deploying to remote servers the current certificate
     * @type {string}
     * @memberof SslCertificate
     */
    status: SslCertificateStatusEnum;
    /**
     * Tells if the certificate is active for all linked servers and applications
     * @type {boolean}
     * @memberof SslCertificate
     */
    active: boolean;
    /**
     * The unique id of the user to which this record belongs to
     * @type {number}
     * @memberof SslCertificate
     */
    user_id?: number;
    /**
     * The date and time when this certificate will no longer be valid, down to minute precision
     * @type {string}
     * @memberof SslCertificate
     */
    expires_at?: string;
    /**
     * The date and time when this certificate was renewed for the last time
     * @type {string}
     * @memberof SslCertificate
     */
    last_renewed_at?: string;
    /**
     * The date and time when the record was created
     * @type {string}
     * @memberof SslCertificate
     */
    created_at?: string;
    /**
     * The date and time when the record was last updated
     * @type {string}
     * @memberof SslCertificate
     */
    updated_at?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SslCertificateIssuerEnum {
    Custom = 'custom',
    LetsEncrypt = 'lets-encrypt'
}
/**
    * @export
    * @enum {string}
    */
export enum SslCertificateTypeEnum {
    SingleDomain = 'single-domain',
    MultiDomain = 'multi-domain',
    Wildcard = 'wildcard'
}
/**
    * @export
    * @enum {string}
    */
export enum SslCertificateValidationLevelEnum {
    DV = 'DV',
    OV = 'OV',
    EV = 'EV'
}
/**
    * @export
    * @enum {string}
    */
export enum SslCertificateStatusEnum {
    Pending = 'pending',
    InProgress = 'in-progress',
    Cancelled = 'cancelled',
    Completed = 'completed',
    Failed = 'failed'
}


