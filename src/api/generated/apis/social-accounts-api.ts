/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { SocialAccount } from '../../generated/models';
import { SocialAccountCreate } from '../../generated/models';
import { SocialAccountStatus } from '../../generated/models';

/**
 * SocialAccountsApiService - Auto-generated
 */
export class SocialAccountsApiService extends ApiBaseService {
    /**
     * 
     * @summary Create a new social account linked to the current user\'s profile
     * @param {SocialAccountCreate} socialAccountCreate A JSON object containing social provider callback data
     */
    public async addSocialAccount(socialAccountCreate: SocialAccountCreate): Promise<ApiResponse<SocialAccount>> {
        if (socialAccountCreate === null || socialAccountCreate === undefined) {
            throw new ArgumentNullException('socialAccountCreate', 'addSocialAccount');
        }
        const response = await this.post <SocialAccount, SocialAccountCreate>(`/social-accounts`, socialAccountCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Delete a given social account
     * @param {number} id The Id of the social account to be deleted
     */
    public async deleteSocialAccount(id: number): Promise<ApiResponse<void>> {
        if (id === null || id === undefined) {
            throw new ArgumentNullException('id', 'deleteSocialAccount');
        }
        const response = await this.delete <void>(`/social-accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get details of a Social authentication provider, by its name
     * @param {string} provider Unique name/Id of the provider to be retrieved
     */
    public async getSocialAccountByName(provider: string): Promise<ApiResponse<SocialAccount>> {
        if (provider === null || provider === undefined) {
            throw new ArgumentNullException('provider', 'getSocialAccountByName');
        }
        const response = await this.get <SocialAccount>(`/social-accounts/{provider}`.replace(`{${"provider"}}`, encodeURIComponent(String(provider))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get the connect status of a Social authentication provider, by its name
     * @param {string} provider Unique name of the provider to be retrieved
     */
    public async getSocialAccountStatusByName(provider: string): Promise<ApiResponse<SocialAccountStatus>> {
        if (provider === null || provider === undefined) {
            throw new ArgumentNullException('provider', 'getSocialAccountStatusByName');
        }
        const response = await this.get <SocialAccountStatus>(`/social-accounts/{provider}/status`.replace(`{${"provider"}}`, encodeURIComponent(String(provider))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Return a list of all social accounts belonging to current user
     */
    public async listSocialAccounts(): Promise<ApiResponse<Array<SocialAccount>>> {
        const response = await this.get <Array<SocialAccount>>(`/social-accounts`);
        return new ApiResponse(response);
    }
}
