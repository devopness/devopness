/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { Daemon } from '../../generated/models';
import { ExtraBodyParams } from '../../generated/models';

/**
 * DaemonsApiService - Auto-generated
 */
export class DaemonsApiService extends ApiBaseService {
    /**
     * 
     * @summary Delete a given Background process
     * @param {number} daemonId Numeric ID of the daemon to be deleted
     */
    public async deleteDaemon(daemonId: number): Promise<ApiResponse<void>> {
        if (daemonId === null || daemonId === undefined) {
            throw new ArgumentNullException('daemonId', 'deleteDaemon');
        }
        const queryString = [].join('&');
        const requestUrl = '/daemons/{daemon_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"daemon_id"}}`, encodeURIComponent(String(daemonId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a background process by ID
     * @param {number} daemonId Numeric ID of the daemon to get
     */
    public async getDaemon(daemonId: number): Promise<ApiResponse<Daemon>> {
        if (daemonId === null || daemonId === undefined) {
            throw new ArgumentNullException('daemonId', 'getDaemon');
        }
        const queryString = [].join('&');
        const requestUrl = '/daemons/{daemon_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Daemon>(requestUrl.replace(`{${"daemon_id"}}`, encodeURIComponent(String(daemonId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Restart a background process
     * @param {number} daemonId Numeric ID of the daemon to restart
     * @param {ExtraBodyParams} [extraBodyParams] A JSON object containing list of additional parameters
     */
    public async restartDaemon(daemonId: number, extraBodyParams?: ExtraBodyParams): Promise<ApiResponse<void>> {
        if (daemonId === null || daemonId === undefined) {
            throw new ArgumentNullException('daemonId', 'restartDaemon');
        }
        const queryString = [].join('&');
        const requestUrl = '/daemons/{daemon_id}/restart' + (queryString? `?${queryString}` : '');

        const response = await this.post <void, ExtraBodyParams>(requestUrl.replace(`{${"daemon_id"}}`, encodeURIComponent(String(daemonId))), extraBodyParams);
        return new ApiResponse(response);
    }
}
