/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApplicationOptions } from '../../generated/models';
import { CronJobOptions } from '../../generated/models';
import { EnvironmentOptions } from '../../generated/models';
import { ServerOptions } from '../../generated/models';
import { ServiceOptions } from '../../generated/models';

/**
 * StaticDataApiService - Auto-generated
 */
export class StaticDataApiService extends ApiBaseService {
    /**
     * 
     * @summary Lists options of the applications
     */
    public async listApplicationOptions(): Promise<ApiResponse<ApplicationOptions>> {
        
        let queryString = '';

        const requestUrl = '/static/applications' + (queryString? `?${queryString}` : '');

        const response = await this.get <ApplicationOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Lists options of the cronjobs
     */
    public async listCronJobOptions(): Promise<ApiResponse<CronJobOptions>> {
        
        let queryString = '';

        const requestUrl = '/static/cronjobs' + (queryString? `?${queryString}` : '');

        const response = await this.get <CronJobOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Lists options of the environments
     */
    public async listEnvironmentOptions(): Promise<ApiResponse<EnvironmentOptions>> {
        
        let queryString = '';

        const requestUrl = '/static/environments' + (queryString? `?${queryString}` : '');

        const response = await this.get <EnvironmentOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Lists options of the servers
     */
    public async listServerOptions(): Promise<ApiResponse<ServerOptions>> {
        
        let queryString = '';

        const requestUrl = '/static/servers' + (queryString? `?${queryString}` : '');

        const response = await this.get <ServerOptions>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Lists options of the services
     */
    public async listServiceOptions(): Promise<ApiResponse<ServiceOptions>> {
        
        let queryString = '';

        const requestUrl = '/static/services' + (queryString? `?${queryString}` : '');

        const response = await this.get <ServiceOptions>(requestUrl);
        return new ApiResponse(response);
    }
}
