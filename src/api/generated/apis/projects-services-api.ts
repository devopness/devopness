/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Service } from '../../generated/models';
import { ServiceCreate } from '../../generated/models';

/**
 * ProjectsServicesApiService - Auto-generated
 */
export class ProjectsServicesApiService extends ApiBaseService {
    /**
     * 
     * @summary Add a service to a project and triggers its setup in each linked server
     * @param {number} projectId The service\&#39;s unique id
     * @param {ServiceCreate} serviceCreate A JSON object containing service data
     */
    public async addServiceToProject(projectId: number, serviceCreate: ServiceCreate): Promise<ApiResponse<Service>> {
        if (projectId === null || projectId === undefined) {
            throw new ArgumentNullException('projectId', 'addServiceToProject');
        }
        if (serviceCreate === null || serviceCreate === undefined) {
            throw new ArgumentNullException('serviceCreate', 'addServiceToProject');
        }
        const queryString = [].join('&');
        const requestUrl = '/projects/{project_id}/services' + (queryString? `?${queryString}` : '');

        const response = await this.post <Service, ServiceCreate>(requestUrl.replace(`{${"project_id"}}`, encodeURIComponent(String(projectId))), serviceCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List all services in a project
     * @param {number} projectId The service unique Id
     */
    public async listProjectServices(projectId: number): Promise<ApiResponse<Array<Service>>> {
        if (projectId === null || projectId === undefined) {
            throw new ArgumentNullException('projectId', 'listProjectServices');
        }
        const queryString = [].join('&');
        const requestUrl = '/projects/{project_id}/services' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<Service>>(requestUrl.replace(`{${"project_id"}}`, encodeURIComponent(String(projectId))));
        return new ApiResponse(response);
    }
}
