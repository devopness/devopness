/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { Member } from '../../generated/models';
import { MemberRelation } from '../../generated/models';

/**
 * TeamsMembersApiService - Auto-generated
 */
export class TeamsMembersApiService extends ApiBaseService {
    /**
     * 
     * @summary Delete a given team member
     * @param {number} teamId Numeric ID of the team
     * @param {number} memberId Numeric ID of the member to be deleted
     */
    public async deleteTeamMember(teamId: number, memberId: number): Promise<ApiResponse<void>> {
        if (teamId === null || teamId === undefined) {
            throw new ArgumentNullException('teamId', 'deleteTeamMember');
        }
        if (memberId === null || memberId === undefined) {
            throw new ArgumentNullException('memberId', 'deleteTeamMember');
        }
        
        let queryString = '';

        const requestUrl = '/teams/{team_id}/members/{member_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"team_id"}}`, encodeURIComponent(String(teamId))).replace(`{${"member_id"}}`, encodeURIComponent(String(memberId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a member of team by ID
     * @param {number} teamId Numeric ID of the team
     * @param {number} memberId Numeric ID of the member to be retrieved
     */
    public async getTeamMember(teamId: number, memberId: number): Promise<ApiResponse<Member>> {
        if (teamId === null || teamId === undefined) {
            throw new ArgumentNullException('teamId', 'getTeamMember');
        }
        if (memberId === null || memberId === undefined) {
            throw new ArgumentNullException('memberId', 'getTeamMember');
        }
        
        let queryString = '';

        const requestUrl = '/teams/{team_id}/members/{member_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Member>(requestUrl.replace(`{${"team_id"}}`, encodeURIComponent(String(teamId))).replace(`{${"member_id"}}`, encodeURIComponent(String(memberId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Returns a list of all members belonging to a team
     * @param {number} teamId Numeric ID of the team to get members from
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listTeamMembers(teamId: number, page?: number, perPage?: number): Promise<ApiResponse<Array<MemberRelation>>> {
        if (teamId === null || teamId === undefined) {
            throw new ArgumentNullException('teamId', 'listTeamMembers');
        }
        
        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/teams/{team_id}/members' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<MemberRelation>>(requestUrl.replace(`{${"team_id"}}`, encodeURIComponent(String(teamId))));
        return new ApiResponse(response);
    }
}
