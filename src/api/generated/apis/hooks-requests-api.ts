/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { HookRequest } from '../../generated/models';
import { HookRequestRelation } from '../../generated/models';

/**
 * HooksRequestsApiService - Auto-generated
 */
export class HooksRequestsApiService extends ApiBaseService {
    /**
     * 
     * @summary Get a hook request by id
     * @param {string} hookRequestId Unique ID of the hook request to be retrieved
     */
    public async getHookRequest(hookRequestId: string): Promise<ApiResponse<HookRequest>> {
        if (hookRequestId === null || hookRequestId === undefined) {
            throw new ArgumentNullException('hookRequestId', 'getHookRequest');
        }
        
        let queryString = '';

        const requestUrl = '/hook-requests/{hook_request_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <HookRequest>(requestUrl.replace(`{${"hook_request_id"}}`, encodeURIComponent(String(hookRequestId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Returns a list of all hook requests belonging to an incoming hook
     * @param {string} hookId Unique ID of the incoming hook to retrieve request list
     */
    public async listIncomingHookRequests(hookId: string): Promise<ApiResponse<Array<HookRequestRelation>>> {
        if (hookId === null || hookId === undefined) {
            throw new ArgumentNullException('hookId', 'listIncomingHookRequests');
        }
        
        let queryString = '';

        const requestUrl = '/hooks/incoming/{hook_id}/requests' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<HookRequestRelation>>(requestUrl.replace(`{${"hook_id"}}`, encodeURIComponent(String(hookId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Returns a list of all hook requests belonging to an outgoing hook
     * @param {string} hookId Unique ID of the outgoing hook to retrieve request list
     */
    public async listOutgoingHookRequests(hookId: string): Promise<ApiResponse<Array<HookRequestRelation>>> {
        if (hookId === null || hookId === undefined) {
            throw new ArgumentNullException('hookId', 'listOutgoingHookRequests');
        }
        
        let queryString = '';

        const requestUrl = '/hooks/outgoing/{hook_id}/requests' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<HookRequestRelation>>(requestUrl.replace(`{${"hook_id"}}`, encodeURIComponent(String(hookId))));
        return new ApiResponse(response);
    }
}
