/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { ApplicationScript } from '../../generated/models';
import { ApplicationScriptCreate } from '../../generated/models';

/**
 * ApplicationsScriptsApiService - Auto-generated
 */
export class ApplicationsScriptsApiService extends ApiBaseService {
    /**
     * 
     * @summary Add script to application as a deployment step
     * @param {number} applicationId Unique ID of the application to retrieve scripts from
     * @param {ApplicationScriptCreate} applicationScriptCreate A JSON object containing application script data
     */
    public async addScriptToApplication(applicationId: number, applicationScriptCreate: ApplicationScriptCreate): Promise<ApiResponse<Array<ApplicationScript>>> {
        if (applicationId === null || applicationId === undefined) {
            throw new ArgumentNullException('applicationId', 'addScriptToApplication');
        }
        if (applicationScriptCreate === null || applicationScriptCreate === undefined) {
            throw new ArgumentNullException('applicationScriptCreate', 'addScriptToApplication');
        }
        const response = await this.post <Array<ApplicationScript>, ApplicationScriptCreate>(`/application/{application_id}/scripts`.replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId))), applicationScriptCreate);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary List scripts to be executed as custom deployment steps of an application
     * @param {number} applicationId Unique ID of the application to retrieve scripts from
     */
    public async listApplicationScripts(applicationId: number): Promise<ApiResponse<Array<ApplicationScript>>> {
        if (applicationId === null || applicationId === undefined) {
            throw new ArgumentNullException('applicationId', 'listApplicationScripts');
        }
        const response = await this.get <Array<ApplicationScript>>(`/application/{application_id}/scripts`.replace(`{${"application_id"}}`, encodeURIComponent(String(applicationId))));
        return new ApiResponse(response);
    }
}
