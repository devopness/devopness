/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Server } from '../../generated/models';
import { ServerCommands } from '../../generated/models';
import { ServerConnect } from '../../generated/models';
import { ServerRelation } from '../../generated/models';
import { ServerUpdate } from '../../generated/models';

/**
 * ServersApiService - Auto-generated
 */
export class ServersApiService extends ApiBaseService {
    /**
     * 
     * @summary Connect a server to devopness platform
     * @param {number} serverId The server numeric Id
     * @param {string} activationToken The server activation token
     */
    public async connectServer(serverId: number, activationToken: string): Promise<ApiResponse<ServerConnect>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'connectServer');
        }
        if (activationToken === null || activationToken === undefined) {
            throw new ArgumentNullException('activationToken', 'connectServer');
        }
        
        let queryString = '';

        const requestUrl = '/servers/{server_id}/connect/{activation_token}' + (queryString? `?${queryString}` : '');

        const response = await this.post <ServerConnect>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))).replace(`{${"activation_token"}}`, encodeURIComponent(String(activationToken))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a server by ID
     * @param {number} serverId Numeric ID of the server to get
     */
    public async getServer(serverId: number): Promise<ApiResponse<Server>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'getServer');
        }
        
        let queryString = '';

        const requestUrl = '/servers/{server_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Server>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get commands to be executed on the given server
     * @param {number} serverId The server numeric Id
     */
    public async getServerCommands(serverId: number): Promise<ApiResponse<ServerCommands>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'getServerCommands');
        }
        
        let queryString = '';

        const requestUrl = '/servers/{server_id}/commands' + (queryString? `?${queryString}` : '');

        const response = await this.get <ServerCommands>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Return a list of all servers belonging to current user
     * @param {number} [page] Number of the page to be retrieved
     * @param {number} [perPage] Number of items returned per page
     */
    public async listServers(page?: number, perPage?: number): Promise<ApiResponse<Array<ServerRelation>>> {
        
        let queryString = '';
        const queryParams = { page: page, per_page: perPage, } as { [key: string]: any };
        for (const key in queryParams) {
            if (queryParams[key] === undefined || queryParams[key] === null) {
                continue;
            }

            queryString += (queryString? '&' : '') + `${key}=${encodeURI(queryParams[key])}`;
        }

        const requestUrl = '/servers' + (queryString? `?${queryString}` : '');

        const response = await this.get <Array<ServerRelation>>(requestUrl);
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Update an existing server
     * @param {number} serverId Numeric ID of the server to update
     * @param {ServerUpdate} serverUpdate A JSON object containing server data
     */
    public async updateServer(serverId: number, serverUpdate: ServerUpdate): Promise<ApiResponse<void>> {
        if (serverId === null || serverId === undefined) {
            throw new ArgumentNullException('serverId', 'updateServer');
        }
        if (serverUpdate === null || serverUpdate === undefined) {
            throw new ArgumentNullException('serverUpdate', 'updateServer');
        }
        
        let queryString = '';

        const requestUrl = '/servers/{server_id}' + (queryString? `?${queryString}` : '');

        const response = await this.put <void, ServerUpdate>(requestUrl.replace(`{${"server_id"}}`, encodeURIComponent(String(serverId))), serverUpdate);
        return new ApiResponse(response);
    }
}
