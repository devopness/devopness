/* eslint-disable */
/**
 * devopness API
 * Devopness API - Painless essential DevOps to everyone 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
import { ApiError } from '../../generated/models';
import { Script } from '../../generated/models';
import { ScriptUpdate } from '../../generated/models';

/**
 * ScriptsApiService - Auto-generated
 */
export class ScriptsApiService extends ApiBaseService {
    /**
     * 
     * @summary Delete a script by ID
     * @param {number} scriptId The id of the script
     */
    public async deleteScript(scriptId: number): Promise<ApiResponse<void>> {
        if (scriptId === null || scriptId === undefined) {
            throw new ArgumentNullException('scriptId', 'deleteScript');
        }
        const queryString = [].join('&');
        const requestUrl = '/scripts/{script_id}' + (queryString? `?${queryString}` : '');

        const response = await this.delete <void>(requestUrl.replace(`{${"script_id"}}`, encodeURIComponent(String(scriptId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Get a script by ID
     * @param {number} scriptId The unique id of the script
     */
    public async getScript(scriptId: number): Promise<ApiResponse<Script>> {
        if (scriptId === null || scriptId === undefined) {
            throw new ArgumentNullException('scriptId', 'getScript');
        }
        const queryString = [].join('&');
        const requestUrl = '/scripts/{script_id}' + (queryString? `?${queryString}` : '');

        const response = await this.get <Script>(requestUrl.replace(`{${"script_id"}}`, encodeURIComponent(String(scriptId))));
        return new ApiResponse(response);
    }

    /**
     * 
     * @summary Update an existing script
     * @param {number} scriptId The unique id of the script to be updated
     * @param {ScriptUpdate} scriptUpdate A JSON object containing script data
     */
    public async updateScript(scriptId: number, scriptUpdate: ScriptUpdate): Promise<ApiResponse<void>> {
        if (scriptId === null || scriptId === undefined) {
            throw new ArgumentNullException('scriptId', 'updateScript');
        }
        if (scriptUpdate === null || scriptUpdate === undefined) {
            throw new ArgumentNullException('scriptUpdate', 'updateScript');
        }
        const queryString = [].join('&');
        const requestUrl = '/scripts/{script_id}' + (queryString? `?${queryString}` : '');

        const response = await this.put <void, ScriptUpdate>(requestUrl.replace(`{${"script_id"}}`, encodeURIComponent(String(scriptId))), scriptUpdate);
        return new ApiResponse(response);
    }
}
