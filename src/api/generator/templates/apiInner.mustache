{{#withSeparateModelsAndApi}}
/* eslint-disable */
{{>licenseInfo}}
import { ApiBaseService } from "../../../services/ApiBaseService";
import { ApiResponse } from "../../../common/ApiResponse";
import { ArgumentNullException } from "../../../common/Exceptions";
{{#imports}}
import { {{classname}} } from '{{apiRelativeToRoot}}{{tsModelPackage}}';
{{/imports}}

{{/withSeparateModelsAndApi}}
{{^withSeparateModelsAndApi}}
{{/withSeparateModelsAndApi}}
{{#operations}}
/**
 * {{classname}}Service - Auto-generated{{#description}}
 * {{{description}}}{{/description}}
 */
{{#withInterfaces}}
export class {{classname}} extends ApiBaseService implements ISomeDevopnessInterfaceName {
{{/withInterfaces}}
{{^withInterfaces}}
export class {{classname}}Service extends ApiBaseService {
{{/withInterfaces}}
    {{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
        {{^isHeaderParam}}
     * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
        {{/isHeaderParam}}
     {{/allParams}}
     */
    public async {{nickname}}({{#allParams}}{{^isHeaderParam}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^-last}}, {{/-last}}{{/isHeaderParam}}{{/allParams}}): Promise<ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}>> {
    {{#allParams}}
    {{^isHeaderParam}}
    {{#required}}
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new ArgumentNullException('{{paramName}}', '{{nickname}}');
        }
    {{/required}}
    {{/isHeaderParam}}
    {{/allParams}}
        const queryString = [{{#queryParams}}`{{baseName}}=${ {{paramName}} }`,{{/queryParams}}].join('&');
        const requestUrl = '{{{path}}}' + (queryString? `?${queryString}` : '');

        const response = await this.{{#lambda.lowercase}}{{httpMethod}} {{/lambda.lowercase}}<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}{{#allParams}}{{^isHeaderParam}}{{#-last}}{{^isPrimitiveType}}, {{dataType}}{{/isPrimitiveType}}{{/-last}}{{/isHeaderParam}}{{/allParams}}>(requestUrl{{#pathParams}}.replace(`{${"{{baseName}}"}}`, encodeURIComponent(String({{paramName}}))){{/pathParams}}{{#allParams}}{{^isHeaderParam}}{{#-last}}{{^isPrimitiveType}}, {{paramName}}{{/isPrimitiveType}}{{/-last}}{{/isHeaderParam}}{{/allParams}});
        return new ApiResponse(response);
    }
    {{^-last}}

    {{/-last}}
    {{/operation}}
}
{{/operations}}
